{"version":3,"sources":["webpack://InquiryMonad/webpack/universalModuleDefinition","webpack://InquiryMonad/webpack/bootstrap","webpack://InquiryMonad/./node_modules/simple-maybe/src/index.js","webpack://InquiryMonad/./src/index.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","Just","x","isJust","isNothing","inspect","_","map","f","Maybe","of","ap","y","chain","join","fork","g","sequence","Nothing","undefined","simple_maybe_1","IOU","concat","head","Array","isArray","length","tail","isEmpty","Boolean","isInquiry","isPass","isFail","isIOU","Pass","fold","answer","Inquiry","informant","subject","fail","iou","pass","Fail","InquirySubject","inquire","inquireResponse","inquireMap","reduce","inq","ii","swap","unison","breakpoint","milestone","conclude","cleared","noop","faulted","suffice","scratch","zip","exportInquiry","console","warn","warnTypeError","InquiryPSubject","InquiryP","InquiryPOf","warnTypeErrorP","buildInq","vals","acc","cur","then","response","syncronousResult","__awaiter","this","Promise","all","catch","err","error","await","t","Infinity","timeLimit","resolve","reject","setTimeout","awaitPromises","race","exportInquiryP"],"mappings":"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","file":"inquiry-monad.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"InquiryMonad\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"InquiryMonad\"] = factory();\n\telse\n\t\troot[\"InquiryMonad\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","const Just = x => ({\n    isJust: true,\n    isNothing: false,\n    inspect: _ => `Just(${x})`,\n    map: f => Maybe.of(f(x)),\n    ap: y => y.map(x),\n    chain: f => f(x),\n    join: _ => x,\n    fork: (_, g) => g(x),\n    sequence: of => x.map(Maybe.of)\n});\n\nconst Nothing = _ => ({\n    isJust: false,\n    isNothing: true,\n    inspect: _ => `Nothing`,\n    map: _ => Nothing(),\n    ap: _ => Nothing(),\n    chain: _ => Nothing(),\n    join: _ => Nothing(),\n    fork: (f, _) => f(),\n    sequence: of => of(Nothing())\n});\n\nconst Maybe = {\n    of: x => x === null || x === undefined ? Nothing() : Just(x)\n};\n\nmodule.exports = {Maybe, Nothing, Just};","import { Maybe } from 'simple-maybe';\n\nconst noop = () => {};\n\nconst IOU = <T>(x: T | Array<T>): IOUMonad => ({\n    map: (f: Function) => IOU(f(x)),\n    chain: (f: Function) => f(x),\n    ap: (y: Monad) => y.map(x),\n    inspect: () => <string>`IOU(${x})`,\n    join: () => x,\n    concat: (o: IOUMonad) =>\n        o.chain((r: any) => IOU((x as Array<T>).concat(r))),\n    head: () => (Array.isArray(x) && x.length ? x[0] : []),\n    tail: () => (Array.isArray(x) && x.length ? x[x.length - 1] : []),\n    isEmpty: () => Boolean(!Array.isArray(x) || x.length === 0),\n    isInquiry: false,\n    isPass: false,\n    isFail: false,\n    isIOU: true\n});\n\nconst Pass = <T>(x: Array<T> | T): PassMonad => ({\n    map: (f: Function) => Pass(f(x)),\n    chain: (f: Function) => f(x),\n    fold: (f: Function, _: Function) => f(x),\n    fork: (_: Function, f: Function) => f(x),\n    head: () => (Array.isArray(x) && x.length ? x[0] : []),\n    tail: () => (Array.isArray(x) && x.length ? x[x.length - 1] : []),\n    join: () => x,\n    inspect: () => <string>`Pass(${x})`,\n    concat: (o: PassFailMonad) =>\n        o.fold((r: any) => Pass((x as Array<T>).concat(r)), null),\n    ap: (y: PassFailMonad) => (y.isPass ? y.concat(Pass(x)) : Pass(x)),\n    answer: (i: Inquiry, n: string = '(anonymous)', c: Function = Inquiry) => {\n        i.informant([n, Pass(x)]);\n        return c({\n            subject: i.subject,\n            fail: i.fail,\n            iou: i.iou,\n            pass: i.pass.concat(Pass(x)),\n            informant: i.informant\n        });\n    },\n    isEmpty: () => Boolean(!Array.isArray(x) || x.length === 0),\n    isPass: true,\n    isFail: false,\n    isIOU: false,\n    isInquiry: false\n});\n\nconst Fail = <T>(x: Array<T> | T): FailMonad => ({\n    map: (f: Function) => Fail(f(x)),\n    chain: (f: Function) => f(x),\n    fold: (_: Function, f: Function) => f(x),\n    fork: (f: Function, _: Function) => f(x),\n    head: () => (Array.isArray(x) && x.length ? x[0] : []),\n    tail: () => (Array.isArray(x) && x.length ? x[x.length - 1] : []),\n    join: () => x,\n    inspect: () => <string>`Fail(${x})`,\n    concat: (o: PassFailMonad) =>\n        o.fork((r: any) => Fail((x as Array<T>).concat(r)), null),\n    ap: (y: PassFailMonad) => (y.isPass ? Fail(x) : y.concat(Fail(x))),\n    answer: (i: Inquiry, n: string = '(anonymous)', c: Function = Inquiry) => {\n        i.informant([n, Fail(x)]);\n        return c({\n            subject: i.subject,\n            fail: i.fail.concat(Fail(x)),\n            pass: i.pass,\n            iou: i.iou,\n            informant: i.informant\n        });\n    },\n    isEmpty: () => Boolean(!Array.isArray(x) || x.length === 0),\n    isPass: false,\n    isFail: true,\n    isIOU: false,\n    isInquiry: false\n});\n\nconst InquirySubject = <T>(x: T | InquiryMonad) =>\n    (x as any).isInquiry\n        ? x\n        : Inquiry({\n              subject: Maybe.of(x),\n              fail: Fail([]),\n              pass: Pass([]),\n              iou: IOU([]),\n              informant: <T>(_: T) => _\n          });\n\nconst warnTypeError = <T>(x: T) => {\n    console.warn(\n        'Inquiry.of requires properties: subject, fail, pass, iou, informant. Converting to Inquiry.subject().'\n    );\n    return InquirySubject(x);\n};\n\nconst InquiryOf = (x: Inquiry) =>\n    'subject' in x &&\n    'fail' in x &&\n    'pass' in x &&\n    'iou' in x &&\n    'informant' in x\n        ? Inquiry(x)\n        : warnTypeError(x);\n\nconst Inquiry = (x: Inquiry): InquiryMonad => ({\n    // Inquire: core method\n    inquire: (f: Function) => {\n        const inquireResponse = f(x.subject.join());\n        return inquireResponse.isFail ||\n            inquireResponse.isPass ||\n            inquireResponse.isInquiry\n            ? inquireResponse.answer(x, f.name, Inquiry)\n            : Pass(inquireResponse).answer(x, f.name, Inquiry);\n    },\n\n    inquireMap: (f: Function, i: Array<any>): InquiryMonad =>\n        i.reduce(\n            (inq, ii) => {\n                const inquireResponse = f(ii)(inq.join().subject.join());\n\n                // each return aggregates new contained value through exit\n                return inquireResponse.isFail ||\n                    inquireResponse.isPass ||\n                    inquireResponse.isInquiry\n                    ? inquireResponse.answer(inq.join(), f.name, Inquiry)\n                    : Pass(inquireResponse).answer(x, f.name, Inquiry);\n            },\n\n            // initial Inquiry will be what is in `x` now\n            Inquiry({\n                subject: x.subject,\n                iou: x.iou,\n                fail: x.fail,\n                pass: x.pass,\n                informant: x.informant\n            })\n        ),\n\n    // Informant: for spying/logging/observable\n    informant: (f: Function) =>\n        Inquiry({\n            subject: x.subject,\n            iou: x.iou,\n            fail: x.fail,\n            pass: x.pass,\n            informant: f\n        }),\n\n    inspect: (): string =>\n        `Inquiry(${x.fail.inspect()} ${x.pass.inspect()} ${x.iou.inspect()}`,\n\n    // Flow control: swap pass/fail\n    swap: (): InquiryMonad =>\n        Inquiry({\n            subject: x.subject,\n            iou: x.iou,\n            fail: Fail(x.pass.join()),\n            pass: Pass(x.fail.join()),\n            informant: x.informant\n        }),\n\n    // Mapping across both branches\n    unison: (\n        f: Function\n    ): InquiryMonad => // apply a single map to both fail & pass (e.g. sort)\n        Inquiry({\n            subject: x.subject,\n            iou: x.iou,\n            fail: Fail(f(x.fail.join())),\n            pass: Pass(f(x.pass.join())),\n            informant: x.informant\n        }),\n\n    // standard Monad methods\n    map: (f: Function): Inquiry => InquirySubject(f(x)),\n    ap: (y: Monad) => y.map(x),\n    chain: (f: Function) => f(x),\n    join: (): Inquiry => x,\n\n    // execute the provided function if there are failures, else continue\n    breakpoint: (f: Function) => (x.fail.join().length ? Inquiry(f(x)) : Inquiry(x)),\n\n    // execute the provided function if there are passes, else continue\n    milestone: (f: Function) => (x.pass.join().length ? Inquiry(f(x)) : Inquiry(x)),\n\n    // internal method: execute informant, return new InquiryP() based on updated results\n    answer: (i: Inquiry, n: string, _: Function) => {\n        i.informant([n, Inquiry(x)]);\n        return Inquiry({\n            subject: i.subject,\n            iou: i.iou,\n            fail: i.fail.concat(x.fail),\n            pass: i.pass.concat(x.pass),\n            informant: i.informant\n        });\n    },\n\n    // Unwrap methods\n\n    // unwraps, mapping for both branches, full value returned\n    conclude: (f: Function, g: Function): Inquiry => ({\n        subject: x.subject,\n        iou: x.iou,\n        fail: f(x.fail),\n        pass: g(x.pass),\n        informant: x.informant\n    }),\n\n    // If there are no fails, handoff aggregated passes to supplied function; if any fails, return noop\n    cleared: (f: Function) => (x.fail.isEmpty() ? f(x.pass) : noop()),\n\n    // If there are fails, handoff aggregated fails to supplied function; if no fails, return noop\n    faulted: (f: Function) => (x.fail.isEmpty() ? noop() : f(x.fail)),\n\n    // If there are passes, handoff aggregated passes to supplied function; if no passes, return noop\n    suffice: (f: Function) => (x.pass.isEmpty() ? noop() : f(x.pass)),\n\n    // If there are no passes, handoff aggregated fails to supplied function; if any passes, return noop\n    scratch: (f: Function) => (x.pass.isEmpty() ? f(x.fail) : noop()),\n\n    // unwrap left if any fails, right if not\n    fork: (f: Function, g: Function) =>\n        x.fail.join().length ? f(x.fail) : g(x.pass),\n\n    // unwrap left if any passes, right if not\n    fold: (f: Function, g: Function) =>\n        x.pass.join().length ? f(x.pass) : g(x.fail),\n\n    // return a merged pass/fail\n    zip: (f: Function): Array<any> => f(x.fail.join().concat(x.pass.join())), // return a concat of pass/fails\n\n    isInquiry: true\n});\n\nconst exportInquiry = {\n    subject: InquirySubject,\n    of: InquiryOf\n};\n\nconst InquiryPSubject = <T>(x: T | InquiryMonad) =>\n    (x as any).isInquiry\n        ? x\n        : InquiryP({\n              subject: Maybe.of(x),\n              fail: Fail([]),\n              pass: Pass([]),\n              iou: IOU([]),\n              informant: <T>(_: T) => _\n          });\n\nconst warnTypeErrorP = <T>(x: T) => {\n    console.warn(\n        'InquiryP.of requires properties: subject, fail, pass, iou, informant. Converting to InquiryP.subject().'\n    );\n    return InquiryPSubject(x);\n};\n\nconst InquiryPOf = (x: Inquiry) =>\n    'subject' in x &&\n    'fail' in x &&\n    'pass' in x &&\n    'iou' in x &&\n    'informant' in x\n        ? InquiryP(x)\n        : warnTypeErrorP(x);\n\nconst buildInq = <T>(x: T) => (\n    vals: Array<any> // @todo find a way to produce fn name\n) => vals.reduce((acc, cur) => cur.answer(acc, '(async fn)', InquiryP), x);\n\nconst InquiryP = (x: Inquiry): InquiryMonad => ({\n    // Inquire: core method\n    inquire: (f: Function) => {\n        const inquireResponse = f(x.subject.join());\n        const syncronousResult = (response: any) =>\n            response.isFail || response.isPass || response.isInquiry\n                ? response.answer(x, f.name, InquiryP)\n                : Pass(response).answer(x, f.name, InquiryP);\n\n        return inquireResponse.then\n            ? InquiryP({\n                  subject: x.subject,\n                  fail: x.fail,\n                  pass: x.pass,\n                  iou: x.iou.concat(IOU([inquireResponse])),\n                  informant: x.informant\n              })\n            : syncronousResult(inquireResponse);\n    },\n\n    inquireMap: (f: Function, i: Array<any>): InquiryMonad =>\n        i.reduce(\n            (inq, ii) => {\n                const inquireResponse = f(ii)(inq.join().subject.join());\n\n                const syncronousResult = (response: any) =>\n                    response.isFail || response.isPass || response.isInquiry\n                        ? response.answer(inq.join(), f.name, InquiryP)\n                        : Pass(response).answer(x, f.name, InquiryP);\n\n                return inquireResponse.then\n                    ? InquiryP({\n                          subject: inq.join().subject,\n                          fail: inq.join().fail,\n                          pass: inq.join().pass,\n                          iou: inq.join().iou.concat(IOU([inquireResponse])),\n                          informant: inq.join().informant\n                      })\n                    : syncronousResult(inquireResponse);\n            },\n\n            // initial Inquiry will be what is in `x` now\n            InquiryP({\n                subject: x.subject,\n                iou: x.iou,\n                fail: x.fail,\n                pass: x.pass,\n                informant: x.informant\n            })\n        ),\n\n    // Informant: for spying/logging/observable\n    informant: (f: Function) =>\n        InquiryP({\n            subject: x.subject,\n            iou: x.iou,\n            fail: x.fail,\n            pass: x.pass,\n            informant: f\n        }),\n\n    inspect: (): string =>\n        `InquiryP(${x.fail.inspect()} ${x.pass.inspect()} ${x.iou.inspect()}`,\n\n    // Flow control: swap left/right pass/fail (iou is untouched)\n    swap: (): InquiryMonad =>\n        InquiryP({\n            subject: x.subject,\n            iou: x.iou,\n            fail: Fail(x.pass.join()),\n            pass: Pass(x.fail.join()),\n            informant: x.informant\n        }),\n\n    // Mapping across both branches\n    unison: (\n        f: Function\n    ): InquiryMonad => // apply a single map to both fail & pass (e.g. sort), iou untouched\n        InquiryP({\n            subject: x.subject,\n            iou: x.iou,\n            fail: Fail(f(x.fail.join())),\n            pass: Pass(f(x.pass.join())),\n            informant: x.informant\n        }),\n\n    // Standard monad methods - note that while these work, remember that `x` is a typed Object\n    map: (f: Function): Inquiry => InquiryPSubject(f(x)), // cast required for now\n    ap: (y: Monad) => y.map(x),\n    chain: (f: Function) => f(x),\n    join: (): Inquiry => x,\n\n    // execute the provided function if there are failures, else continue\n    breakpoint: (f: Function) => (x.fail.join().length ? Inquiry(f(x)) : InquiryP(x)),\n\n    // execute the provided function if there are passes, else continue\n    milestone: (f: Function) => (x.pass.join().length ? Inquiry(f(x)) : InquiryP(x)),\n\n    // internal method: execute informant, return new InquiryP() based on updated results\n    answer: (i: Inquiry, n: string, _: Function): InquiryMonad => {\n        i.informant([n, InquiryP(x)]);\n        return InquiryP({\n            subject: i.subject,\n            iou: i.iou,\n            fail: i.fail.concat(x.fail),\n            pass: i.pass.concat(x.pass),\n            informant: i.informant\n        });\n    },\n\n    // Unwrapping methods: all return Promises, all complete outstanding IOUs\n\n    // @todo handle Promise.reject? Is it a failure or what?\n    // Unwraps the Inquiry after ensuring all IOUs are completed\n    conclude: async (f: Function, g: Function): Promise<Inquiry> =>\n        Promise.all(x.iou.join())\n            .then(buildInq(x))\n            .then(i => (i.isInquiry ? i.join() : i))\n            .then(y => ({\n                subject: y.subject,\n                iou: y.iou,\n                fail: f(y.fail),\n                pass: g(y.pass),\n                informant: y.informant\n            })),\n\n    // If no fails, handoff aggregated passes to supplied function; if fails, return noop\n    cleared: async (f: Function): Promise<InquiryMonad | Array<any>> =>\n        Promise.all(x.iou.join())\n            .then(buildInq(x))\n            .then(i => (i.isInquiry ? i.join() : i))\n            .then(y => (y.fail.isEmpty() ? f(y.pass) : noop()))\n            .catch(err => console.error('err', err)),\n\n    // If fails, handoff aggregated fails to supplied function; if no fails, return noop\n    faulted: async (f: Function): Promise<InquiryMonad | Array<any>> =>\n        Promise.all(x.iou.join())\n            .then(buildInq(x))\n            .then(i => (i.isInquiry ? i.join() : i))\n            .then(y => (y.fail.isEmpty() ? noop() : f(y.fail))),\n\n    // If any passes, handoff aggregated passes to supplied function; if no passes, return noop\n    suffice: async (f: Function): Promise<InquiryMonad | Array<any>> =>\n        Promise.all(x.iou.join())\n            .then(buildInq(x))\n            .then(i => (i.isInquiry ? i.join() : i))\n            .then(y => (y.pass.isEmpty() ? noop() : f(y.pass)))\n            .catch(err => console.error('err', err)),\n\n    // If no passes, handoff aggregated fails to supplied function; if any passes, return noop\n    scratch: async (f: Function): Promise<InquiryMonad | Array<any>> =>\n        Promise.all(x.iou.join())\n            .then(buildInq(x))\n            .then(i => (i.isInquiry ? i.join() : i))\n            .then(y => (y.pass.isEmpty() ? f(y.fail) : noop())),\n\n    // Take left function and hands off fails if any, otherwise takes right function and hands off passes to that function\n    fork: async (f: Function, g: Function): Promise<Array<any>> =>\n        Promise.all(x.iou.join())\n            .then(buildInq(x))\n            .then(i => (i.isInquiry ? i.join() : i))\n            .then(y => (y.fail.join().length ? f(y.fail) : g(y.pass))),\n\n    // Take left function and hands off fails if any, otherwise takes right function and hands off passes to that function\n    fold: async (f: Function, g: Function): Promise<Array<any>> =>\n        Promise.all(x.iou.join())\n            .then(buildInq(x))\n            .then(i => (i.isInquiry ? i.join() : i))\n            .then(y => (y.pass.join().length ? f(y.pass) : g(y.fail))),\n\n    // return a Promise containing a merged fail/pass resultset array\n    zip: async (f: Function): Promise<Array<any>> =>\n        Promise.all(x.iou.join())\n            .then(buildInq(x))\n            .then(i => (i.isInquiry ? i.join() : i))\n            .then(y => f(y.fail.join().concat(y.pass.join()))),\n\n    // await all IOUs to resolve, then return a new Inquiry CONVERTS TO PROMISE!\n    await: async (t: number = Infinity): Promise<InquiryMonad> => {\n        // try: generator function. Each IOU = array in for loop as per https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield\n        const timeLimit = new Promise((resolve, reject) =>\n            setTimeout(resolve, t, [Fail('Promise(s) have timed out')])\n        );\n        const awaitPromises = Promise.all(x.iou.join());\n\n        return (\n            Promise.race([timeLimit, awaitPromises])\n                // @ts-ignore\n                .then(buildInq(x))\n                .then((i: any) => (i.isInquiry ? i.join() : i))\n                .then((y: any) => InquiryPOf(y))\n        );\n    },\n    isInquiry: true\n});\n\nconst exportInquiryP = {\n    subject: InquiryPSubject,\n    of: InquiryPOf\n};\n\nexport {\n    exportInquiry as Inquiry,\n    exportInquiryP as InquiryP,\n    Fail,\n    Pass,\n    IOU\n};\n"],"sourceRoot":""}