{"version":3,"sources":["webpack://InquiryMonad/webpack/universalModuleDefinition","webpack://InquiryMonad/webpack/bootstrap","webpack://InquiryMonad/./src/symbols.ts","webpack://InquiryMonad/./node_modules/simple-maybe/src/index.js","webpack://InquiryMonad/./src/index.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","$$inquirySymbol","Symbol","$$questionsetSymbol","$$questionSymbol","$$passSymbol","$$failSymbol","$$iouSymbol","Just","x","isJust","isNothing","inspect","_","map","f","Maybe","of","ap","y","chain","join","fork","g","sequence","Nothing","undefined","simple_maybe_1","symbols_1","noop","$$notFoundSymbol","IOU","concat","head","Array","isArray","length","tail","isEmpty","Boolean","[object Object]","Pass","fold","answer","Inquiry","informant","subject","fail","iou","pass","questionset","Fail","Question","extract","exportQuestion","console","error","questionTypeError","Questionset","find","a","RegExp","test","b","warn","exportQuestionset","questionsetTypeError","InquirySubject","inquire","fExtractFn","fIsFn","fnName","inquireResponse","resp","warnNotPassFail","inquireMap","reduce","inq","ii","using","swap","unison","breakpoint","milestone","conclude","cleared","faulted","suffice","scratch","zip","exportInquiry","warnTypeError","InquiryPSubject","InquiryP","InquiryPOf","warnTypeErrorP","buildInq","vals","acc","cur","then","response","syncronousResult","__awaiter","this","Promise","all","catch","err","await","t","Infinity","timeLimit","resolve","reject","setTimeout","awaitPromises","race","exportInquiryP"],"mappings":"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","file":"inquiry-monad.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"InquiryMonad\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"InquiryMonad\"] = factory();\n\telse\n\t\troot[\"InquiryMonad\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","export const $$inquirySymbol: unique symbol = Symbol();\nexport const $$questionsetSymbol: unique symbol = Symbol();\nexport const $$questionSymbol: unique symbol = Symbol();\nexport const $$passSymbol: unique symbol = Symbol();\nexport const $$failSymbol: unique symbol = Symbol();\nexport const $$iouSymbol: unique symbol = Symbol();","const Just = x => ({\n    isJust: true,\n    isNothing: false,\n    inspect: _ => `Just(${x})`,\n    map: f => Maybe.of(f(x)),\n    ap: y => y.map(x),\n    chain: f => f(x),\n    join: _ => x,\n    fork: (_, g) => g(x),\n    sequence: of => x.map(Maybe.of)\n});\n\nconst Nothing = _ => ({\n    isJust: false,\n    isNothing: true,\n    inspect: _ => `Nothing`,\n    map: _ => Nothing(),\n    ap: _ => Nothing(),\n    chain: _ => Nothing(),\n    join: _ => Nothing(),\n    fork: (f, _) => f(),\n    sequence: of => of(Nothing())\n});\n\nconst Maybe = {\n    of: x => x === null || x === undefined ? Nothing() : Just(x)\n};\n\nmodule.exports = {Maybe, Nothing, Just};","import { Maybe } from 'simple-maybe';\n\nimport {\n    Monad,\n    InquiryMonad,\n    IOUMonad,\n    PassFailMonad,\n    PassMonad,\n    FailMonad,\n    InquiryValue,\n    QuestionsetMonad,\n    QuestionMonad,\n    QuestionValue\n} from './inquiry-monad';\n\nimport {\n    $$inquirySymbol,\n    $$questionsetSymbol,\n    $$questionSymbol,\n    $$passSymbol,\n    $$failSymbol,\n    $$iouSymbol\n} from './symbols';\n\nconst noop = (): void => {};\n\nconst $$notFoundSymbol: unique symbol = Symbol();\n\nconst IOU = <T>(x: T | Array<T>): IOUMonad => ({\n    map: (f: Function): IOUMonad => IOU(f(x)),\n    chain: (f: Function): any => f(x),\n    ap: (y: Monad): Monad => y.map(x),\n    inspect: (): string => `IOU(${x})`,\n    join: (): T | Array<T> => x,\n    concat: (o: IOUMonad): IOUMonad =>\n        o.chain((r: any): IOUMonad => IOU((x as Array<T>).concat(r))),\n    head: (): Array<T> | T => (Array.isArray(x) && x.length ? x[0] : []),\n    tail: (): Array<T> | T =>\n        Array.isArray(x) && x.length ? x[x.length - 1] : [],\n    isEmpty: (): Boolean => Boolean(!Array.isArray(x) || x.length === 0),\n    [$$inquirySymbol]: false,\n    [$$passSymbol]: false,\n    [$$failSymbol]: false,\n    [$$iouSymbol]: true\n});\n\nconst Pass = <T>(x: Array<T> | T): PassMonad => ({\n    map: (f: Function): PassMonad => Pass(f(x)),\n    chain: (f: Function): any => f(x),\n    fold: (f: Function, _: Function): any => f(x),\n    fork: (_: Function, f: Function): any => f(x),\n    head: (): Array<T> | T => (Array.isArray(x) && x.length ? x[0] : []),\n    tail: (): Array<T> | T =>\n        Array.isArray(x) && x.length ? x[x.length - 1] : [],\n    join: (): Array<T> | T => x,\n    inspect: (): string => `Pass(${x})`,\n    concat: (o: PassFailMonad): PassFailMonad =>\n        o.fold((r: any): PassMonad => Pass((x as Array<T>).concat(r)), noop),\n    ap: (y: PassFailMonad): PassMonad =>\n        (y as any)[$$passSymbol] ? y.concat(Pass(x)) : Pass(x),\n    answer: (\n        i: InquiryValue,\n        n: string = '(anonymous)',\n        c: Function = Inquiry\n    ): InquiryMonad => {\n        i.informant([n, Pass(x)]);\n        return c({\n            subject: i.subject,\n            fail: i.fail,\n            iou: i.iou,\n            pass: i.pass.concat(Pass(x)),\n            informant: i.informant,\n            questionset: i.questionset\n        });\n    },\n    isEmpty: (): Boolean => Boolean(!Array.isArray(x) || x.length === 0),\n    [$$passSymbol]: true,\n    [$$failSymbol]: false,\n    [$$iouSymbol]: false,\n    [$$inquirySymbol]: false\n});\n\nconst Fail = <T>(x: Array<T> | T): FailMonad => ({\n    map: (f: Function): FailMonad => Fail(f(x)),\n    chain: (f: Function): any => f(x),\n    fold: (_: Function, f: Function): any => f(x),\n    fork: (f: Function, _: Function): any => f(x),\n    head: (): Array<T> | T => (Array.isArray(x) && x.length ? x[0] : []),\n    tail: (): Array<T> | T =>\n        Array.isArray(x) && x.length ? x[x.length - 1] : [],\n    join: (): Array<T> | T => x,\n    inspect: (): string => `Fail(${x})`,\n    concat: (o: PassFailMonad): PassFailMonad =>\n        o.fork((r: any): FailMonad => Fail((x as Array<T>).concat(r)), noop),\n    ap: (y: PassFailMonad): FailMonad =>\n        y[$$passSymbol] ? Fail(x) : y.concat(Fail(x)),\n    answer: (\n        i: InquiryValue,\n        n: string = '(anonymous)',\n        c: Function = Inquiry\n    ): InquiryMonad => {\n        i.informant([n, Fail(x)]);\n        return c({\n            subject: i.subject,\n            fail: i.fail.concat(Fail(x)),\n            pass: i.pass,\n            iou: i.iou,\n            informant: i.informant,\n            questionset: i.questionset\n        });\n    },\n    isEmpty: (): Boolean => Boolean(!Array.isArray(x) || x.length === 0),\n    [$$passSymbol]: false,\n    [$$failSymbol]: true,\n    [$$iouSymbol]: false,\n    [$$inquirySymbol]: false\n});\n\nconst questionTypeError = (x: any): void =>\n    console.error(\n        'Question must be passed parameters that adhere to the documented type. Value that was passed:',\n        x\n    );\n\nconst Question = (x: QuestionValue): QuestionMonad => ({\n    map: (f: Function): QuestionMonad => Question(f(x)),\n    chain: (f: Function): any => f(x),\n    ap: (y: Monad): Monad => y.map(x),\n    inspect: (): string => `Question(${x})`,\n    join: (): any => x,\n    call: (i: InquiryMonad): PassFailMonad => x[1](i.join().subject.join()),\n    extract: (): Function => x[1],\n    [$$questionSymbol]: true\n});\n\nconst QuestionOf = (x: QuestionValue): QuestionMonad | void =>\n    Array.isArray(x) ? Question(x) : questionTypeError(x);\n\nconst exportQuestion = {\n    of: QuestionOf\n};\n\nconst Questionset = (x: Array<QuestionValue>): QuestionsetMonad => ({\n    map: (f: Function): QuestionsetMonad => Questionset(f(x)),\n    chain: (f: Function): any => f(x),\n    ap: (y: Monad): Monad => y.map(x),\n    inspect: (): string => `Questionset(${x})`,\n    join: (): any => x,\n    find: (a: string): Monad =>\n        Maybe.of(x.find(i => RegExp(i[0]).test(a)))\n            .map((b: QuestionValue): Function => b[1])\n            .fork((): symbol => {\n                console.warn('Question was not found: ', a);\n                return $$notFoundSymbol;\n            }, (c: Function): Function => c),\n    [$$questionsetSymbol]: true\n});\n\nconst questionsetTypeError = (x: any): void =>\n    console.error(\n        'Questionset must be passed parameters that adhere to the documented type. Value that was passed:',\n        x\n    );\n\nconst QuestionsetOf = (x: Array<QuestionValue>): QuestionsetMonad | void =>\n    Array.isArray(x) ? Questionset(x) : questionsetTypeError(x);\n\nconst exportQuestionset = {\n    of: QuestionsetOf\n};\n\nconst InquirySubject = (x: any | InquiryMonad): InquiryMonad =>\n    (x as any)[$$inquirySymbol]\n        ? x\n        : Inquiry({\n              subject: Maybe.of(x),\n              fail: Fail([]),\n              pass: Pass([]),\n              iou: IOU([]),\n              informant: <T>(_: T) => _,\n              questionset: Questionset([['', noop]])\n          });\n\nconst warnTypeError = <T>(x: T): InquiryMonad => {\n    console.warn(\n        'Inquiry.of requires properties: subject, fail, pass, iou, informant. Converting to Inquiry.subject().'\n    );\n    return InquirySubject(x);\n};\n\n// @todo validate constructor via Symbol\n// @todo add receipts property\nconst InquiryOf = (x: InquiryValue): InquiryMonad =>\n    'subject' in x &&\n    'fail' in x &&\n    'pass' in x &&\n    'iou' in x &&\n    'informant' in x &&\n    'questionset' in x\n        ? Inquiry(x)\n        : warnTypeError(x);\n\nconst Inquiry = (x: InquiryValue): InquiryMonad => ({\n    // Inquire: core method\n    // You may pass a Function, a QuestionMonad (with a function), or a string which will look up\n    //  in the current Inquiry's questionset.\n    inquire: (f: Function | string | QuestionMonad): InquiryMonad => {\n        const fExtractFn = (f as any)[$$questionSymbol]\n            ? (f as QuestionMonad).extract()\n            : f;\n\n        const fIsFn = typeof fExtractFn === 'function';\n        const inquire = fIsFn ? fExtractFn : x.questionset.find(fExtractFn);\n        const fnName = fIsFn ? (fExtractFn as Function).name : fExtractFn;\n\n        const warnNotPassFail = (resp: any): InquiryMonad => {\n            console.warn(\n                'inquire was passed a function that does not return Pass or Fail:',\n                fnName\n            );\n            console.warn('response was:', resp);\n            return Inquiry(x);\n        };\n        const inquireResponse =\n            typeof inquire === 'function' ? inquire(x.subject.join()) : {};\n\n        return inquireResponse[$$failSymbol] ||\n            inquireResponse[$$passSymbol] ||\n            inquireResponse[$$inquirySymbol]\n            ? inquireResponse.answer(x, fnName, Inquiry)\n            : warnNotPassFail([inquireResponse, fnName]);\n    },\n\n    inquireMap: (\n        f: Function | string | QuestionMonad,\n        i: Array<any>\n    ): InquiryMonad =>\n        i.reduce(\n            (inq, ii) => {\n                const fExtractFn = (f as any)[$$questionSymbol]\n                    ? (f as QuestionMonad).extract()\n                    : f;\n                const fIsFn = typeof fExtractFn === 'function';\n                const inquire = fIsFn\n                    ? fExtractFn\n                    : x.questionset.find(fExtractFn);\n                const fnName = fIsFn\n                    ? (fExtractFn as Function).name\n                    : fExtractFn;\n\n                const warnNotPassFail = (resp: any): InquiryMonad => {\n                    console.warn(\n                        'inquire was passed a function that does not return Pass or Fail:',\n                        fnName\n                    );\n                    console.warn('response was:', resp);\n                    return inq;\n                };\n                const inquireResponse =\n                    typeof inquire === 'function'\n                        ? inquire(ii)(inq.join().subject.join())\n                        : {};\n\n                // each return aggregates new contained value through exit\n                return inquireResponse[$$failSymbol] ||\n                    inquireResponse[$$passSymbol] ||\n                    inquireResponse[$$inquirySymbol]\n                    ? inquireResponse.answer(inq.join(), fnName, Inquiry)\n                    : warnNotPassFail([inquireResponse, fnName]);\n            },\n\n            // initial Inquiry will be what is in `x` now\n            Inquiry({\n                subject: x.subject,\n                iou: x.iou,\n                fail: x.fail,\n                pass: x.pass,\n                informant: x.informant,\n                questionset: x.questionset\n            })\n        ),\n\n    using: (a: QuestionsetMonad): InquiryMonad =>\n        Inquiry({\n            subject: x.subject,\n            iou: x.iou,\n            fail: x.fail,\n            pass: x.pass,\n            informant: x.informant,\n            questionset: a\n        }),\n\n    // Informant: for spying/logging/observable\n    informant: (f: Function): InquiryMonad =>\n        Inquiry({\n            subject: x.subject,\n            iou: x.iou,\n            fail: x.fail,\n            pass: x.pass,\n            informant: f,\n            questionset: x.questionset\n        }),\n\n    inspect: (): string =>\n        `Inquiry(${x.fail.inspect()} ${x.pass.inspect()} ${x.iou.inspect()}`,\n\n    // Flow control: swap pass/fail\n    swap: (): InquiryMonad =>\n        Inquiry({\n            subject: x.subject,\n            iou: x.iou,\n            fail: Fail(x.pass.join()),\n            pass: Pass(x.fail.join()),\n            informant: x.informant,\n            questionset: x.questionset\n        }),\n\n    // Mapping across both branches\n    unison: (\n        f: Function\n    ): InquiryMonad => // apply a single map to both fail & pass (e.g. sort)\n        Inquiry({\n            subject: x.subject,\n            iou: x.iou,\n            fail: Fail(f(x.fail.join())),\n            pass: Pass(f(x.pass.join())),\n            informant: x.informant,\n            questionset: x.questionset\n        }),\n\n    // standard Monad methods\n    map: (f: Function): InquiryMonad => InquirySubject(f(x)),\n    ap: (y: Monad): Monad => y.map(x),\n    chain: (f: Function): any => f(x),\n    join: (): InquiryValue => x,\n\n    // execute the provided function if there are failures, else continue\n    breakpoint: (f: Function): InquiryMonad =>\n        x.fail.join().length ? Inquiry(f(x)) : Inquiry(x),\n\n    // execute the provided function if there are passes, else continue\n    milestone: (f: Function): InquiryMonad =>\n        x.pass.join().length ? Inquiry(f(x)) : Inquiry(x),\n\n    // internal method: execute informant, return new InquiryP() based on updated results\n    answer: (i: InquiryValue, n: string, _: Function): InquiryMonad => {\n        i.informant([n, Inquiry(x)]);\n        return Inquiry({\n            subject: i.subject,\n            iou: i.iou,\n            fail: i.fail.concat(x.fail),\n            pass: i.pass.concat(x.pass),\n            informant: i.informant,\n            questionset: i.questionset\n        });\n    },\n\n    // Unwrap methods\n\n    // unwraps, mapping for both branches, full value returned\n    conclude: (f: Function, g: Function): InquiryValue => ({\n        subject: x.subject,\n        iou: x.iou,\n        fail: f(x.fail),\n        pass: g(x.pass),\n        informant: x.informant,\n        questionset: x.questionset\n    }),\n\n    // If there are no fails, handoff aggregated passes to supplied function; if any fails, return noop\n    cleared: (f: Function): any | void =>\n        x.fail.isEmpty() ? f(x.pass) : noop(),\n\n    // If there are fails, handoff aggregated fails to supplied function; if no fails, return noop\n    faulted: (f: Function): void | any =>\n        x.fail.isEmpty() ? noop() : f(x.fail),\n\n    // If there are passes, handoff aggregated passes to supplied function; if no passes, return noop\n    suffice: (f: Function): void | any =>\n        x.pass.isEmpty() ? noop() : f(x.pass),\n\n    // If there are no passes, handoff aggregated fails to supplied function; if any passes, return noop\n    scratch: (f: Function): any | void =>\n        x.pass.isEmpty() ? f(x.fail) : noop(),\n\n    // unwrap left if any fails, right if not\n    fork: (f: Function, g: Function): any =>\n        x.fail.join().length ? f(x.fail) : g(x.pass),\n\n    // unwrap left if any passes, right if not\n    fold: (f: Function, g: Function): any =>\n        x.pass.join().length ? f(x.pass) : g(x.fail),\n\n    // return a merged pass/fail\n    zip: (f: Function): Array<any> => f(x.fail.join().concat(x.pass.join())), // return a concat of pass/fails\n\n    [$$inquirySymbol]: true\n});\n\nconst exportInquiry = {\n    subject: InquirySubject,\n    of: InquiryOf\n};\n\nconst InquiryPSubject = (x: any | InquiryMonad): InquiryMonad =>\n    (x as any)[$$inquirySymbol]\n        ? x\n        : InquiryP({\n              subject: Maybe.of(x),\n              fail: Fail([]),\n              pass: Pass([]),\n              iou: IOU([]),\n              informant: <T>(_: T) => _,\n              questionset: Questionset([['', noop]])\n          });\n\nconst warnTypeErrorP = <T>(x: T): InquiryMonad => {\n    console.warn(\n        'InquiryP.of requires properties: subject, fail, pass, iou, informant. Converting to InquiryP.subject().'\n    );\n    return InquiryPSubject(x);\n};\n\nconst InquiryPOf = (x: InquiryValue): InquiryMonad =>\n    'subject' in x &&\n    'fail' in x &&\n    'pass' in x &&\n    'iou' in x &&\n    'informant' in x &&\n    'questionset' in x\n        ? InquiryP(x)\n        : warnTypeErrorP(x);\n\nconst buildInq = <T>(x: T) => (\n    vals: Array<any> // @todo find a way to produce fn name\n): InquiryMonad =>\n    vals.reduce(\n        (acc, cur) => cur.answer(acc, '(async fn)', InquiryP).join(),\n        x\n    );\n\nconst InquiryP = (x: InquiryValue): InquiryMonad => ({\n    // Inquire: core method\n    inquire: (f: Function | string | QuestionMonad) => {\n        const fExtractFn = (f as any)[$$questionSymbol]\n            ? (f as QuestionMonad).extract()\n            : f;\n        const fIsFn = typeof fExtractFn === 'function';\n        const inquire = fIsFn ? fExtractFn : x.questionset.find(fExtractFn);\n        const fnName = fIsFn ? (fExtractFn as Function).name : fExtractFn;\n\n        const warnNotPassFail = (resp: any): InquiryMonad => {\n            console.warn(\n                'inquire was passed a function that does not return Pass or Fail:',\n                fnName\n            );\n            console.warn('response was:', resp);\n            return Inquiry(x);\n        };\n\n        const inquireResponse =\n            typeof inquire === 'function' ? inquire(x.subject.join()) : {};\n\n        const syncronousResult = (response: any): InquiryMonad =>\n            response[$$failSymbol] ||\n            response[$$passSymbol] ||\n            response[$$inquirySymbol]\n                ? response.answer(x, fnName, InquiryP)\n                : warnNotPassFail([inquireResponse, fnName]);\n\n        return inquireResponse.then\n            ? InquiryP({\n                  subject: x.subject,\n                  fail: x.fail,\n                  pass: x.pass,\n                  iou: x.iou.concat(IOU([inquireResponse])),\n                  informant: x.informant,\n                  questionset: x.questionset\n              })\n            : syncronousResult(inquireResponse);\n    },\n\n    inquireMap: (\n        f: Function | string | QuestionMonad,\n        i: Array<any>\n    ): InquiryMonad =>\n        i.reduce(\n            (inq, ii) => {\n                const fExtractFn = (f as any)[$$questionSymbol]\n                    ? (f as QuestionMonad).extract()\n                    : f;\n                const fIsFn = typeof fExtractFn === 'function';\n                const inquire = fIsFn\n                    ? fExtractFn\n                    : x.questionset.find(fExtractFn);\n                const fnName = fIsFn\n                    ? (fExtractFn as Function).name\n                    : fExtractFn;\n\n                const warnNotPassFail = (resp: any) => {\n                    console.warn(\n                        'inquire was passed a function that does not return Pass or Fail:',\n                        fnName\n                    );\n                    console.warn('response was:', resp);\n                    return inq;\n                };\n                const inquireResponse =\n                    typeof inquire === 'function'\n                        ? inquire(ii)(inq.join().subject.join())\n                        : {};\n\n                const syncronousResult = (response: any): InquiryMonad =>\n                    response[$$failSymbol] ||\n                    response[$$passSymbol] ||\n                    response[$$inquirySymbol]\n                        ? response.answer(inq.join(), fnName, InquiryP)\n                        : Pass(response).answer(x, fnName, InquiryP); // @todo this should be warNotPassFail\n\n                return inquireResponse.then\n                    ? InquiryP({\n                          subject: inq.join().subject,\n                          fail: inq.join().fail,\n                          pass: inq.join().pass,\n                          iou: inq.join().iou.concat(IOU([inquireResponse])),\n                          informant: inq.join().informant,\n                          questionset: inq.join().questionset\n                      })\n                    : syncronousResult(inquireResponse);\n            },\n\n            // initial Inquiry will be what is in `x` now\n            InquiryP({\n                subject: x.subject,\n                iou: x.iou,\n                fail: x.fail,\n                pass: x.pass,\n                informant: x.informant,\n                questionset: x.questionset\n            })\n        ),\n\n    using: (a: QuestionsetMonad): InquiryMonad =>\n        InquiryP({\n            subject: x.subject,\n            iou: x.iou,\n            fail: x.fail,\n            pass: x.pass,\n            informant: x.informant,\n            questionset: a\n        }),\n\n    // Informant: for spying/logging/observable\n    informant: (f: Function): InquiryMonad =>\n        InquiryP({\n            subject: x.subject,\n            iou: x.iou,\n            fail: x.fail,\n            pass: x.pass,\n            informant: f,\n            questionset: x.questionset\n        }),\n\n    inspect: (): string =>\n        `InquiryP(${x.fail.inspect()} ${x.pass.inspect()} ${x.iou.inspect()}`,\n\n    // Flow control: swap left/right pass/fail (iou is untouched)\n    swap: (): InquiryMonad =>\n        InquiryP({\n            subject: x.subject,\n            iou: x.iou,\n            fail: Fail(x.pass.join()),\n            pass: Pass(x.fail.join()),\n            informant: x.informant,\n            questionset: x.questionset\n        }),\n\n    // Mapping across both branches\n    unison: (\n        f: Function\n    ): InquiryMonad => // apply a single map to both fail & pass (e.g. sort), iou untouched\n        InquiryP({\n            subject: x.subject,\n            iou: x.iou,\n            fail: Fail(f(x.fail.join())),\n            pass: Pass(f(x.pass.join())),\n            informant: x.informant,\n            questionset: x.questionset\n        }),\n\n    // Standard monad methods - note that while these work, remember that `x` is a typed Object\n    map: (f: Function): InquiryMonad => InquiryPSubject(f(x)), // cast required for now\n    ap: (y: Monad): Monad => y.map(x),\n    chain: (f: Function): any => f(x),\n    join: (): InquiryValue => x,\n\n    // execute the provided function if there are failures, else continue\n    breakpoint: (f: Function): InquiryMonad =>\n        x.fail.join().length ? InquiryP(f(x)) : InquiryP(x),\n\n    // execute the provided function if there are passes, else continue\n    milestone: (f: Function): InquiryMonad =>\n        x.pass.join().length ? InquiryP(f(x)) : InquiryP(x),\n\n    // internal method: execute informant, return new InquiryP() based on updated results\n    answer: (i: InquiryValue, n: string, _: Function): InquiryMonad => {\n        i.informant([n, InquiryP(x)]);\n        return InquiryP({\n            subject: i.subject,\n            iou: i.iou,\n            fail: i.fail.concat(x.fail),\n            pass: i.pass.concat(x.pass),\n            informant: i.informant,\n            questionset: i.questionset\n        });\n    },\n\n    // Unwrapping methods: all return Promises, all complete outstanding IOUs\n\n    // @todo handle Promise.reject? Is it a failure or what?\n    // Unwraps the Inquiry after ensuring all IOUs are completed\n    conclude: async (f: Function, g: Function): Promise<InquiryValue> =>\n        Promise.all(x.iou.join())\n            .then(buildInq(x))\n            .then(i => (i[$$inquirySymbol] ? i.join() : i))\n            .then(y => ({\n                subject: y.subject,\n                iou: y.iou,\n                fail: f(y.fail),\n                pass: g(y.pass),\n                informant: y.informant,\n                questionset: y.questionset\n            })),\n\n    // If no fails, handoff aggregated passes to supplied function; if fails, return noop\n    cleared: async (f: Function): Promise<InquiryMonad | Array<any>> =>\n        Promise.all(x.iou.join())\n            .then(buildInq(x))\n            .then(i => (i[$$inquirySymbol] ? i.join() : i))\n            .then(y => (y.fail.isEmpty() ? f(y.pass) : noop()))\n            .catch(err => console.error('err', err)),\n\n    // If fails, handoff aggregated fails to supplied function; if no fails, return noop\n    faulted: async (f: Function): Promise<InquiryMonad | Array<any>> =>\n        Promise.all(x.iou.join())\n            .then(buildInq(x))\n            .then(i => (i[$$inquirySymbol] ? i.join() : i))\n            .then(y => (y.fail.isEmpty() ? noop() : f(y.fail))),\n\n    // If any passes, handoff aggregated passes to supplied function; if no passes, return noop\n    suffice: async (f: Function): Promise<InquiryMonad | Array<any>> =>\n        Promise.all(x.iou.join())\n            .then(buildInq(x))\n            .then(i => (i[$$inquirySymbol] ? i.join() : i))\n            .then(y => (y.pass.isEmpty() ? noop() : f(y.pass)))\n            .catch(err => console.error('err', err)),\n\n    // If no passes, handoff aggregated fails to supplied function; if any passes, return noop\n    scratch: async (f: Function): Promise<InquiryMonad | Array<any>> =>\n        Promise.all(x.iou.join())\n            .then(buildInq(x))\n            .then(i => (i[$$inquirySymbol] ? i.join() : i))\n            .then(y => (y.pass.isEmpty() ? f(y.fail) : noop())),\n\n    // Take left function and hands off fails if any, otherwise takes right function and hands off passes to that function\n    fork: async (f: Function, g: Function): Promise<Array<any>> =>\n        Promise.all(x.iou.join())\n            .then(buildInq(x))\n            .then(i => (i[$$inquirySymbol] ? i.join() : i))\n            .then(y => (y.fail.join().length ? f(y.fail) : g(y.pass))),\n\n    // Take left function and hands off fails if any, otherwise takes right function and hands off passes to that function\n    fold: async (f: Function, g: Function): Promise<Array<any>> =>\n        Promise.all(x.iou.join())\n            .then(buildInq(x))\n            .then(i => (i[$$inquirySymbol] ? i.join() : i))\n            .then(y => (y.pass.join().length ? f(y.pass) : g(y.fail))),\n\n    // return a Promise containing a merged fail/pass resultset array\n    zip: async (f: Function): Promise<Array<any>> =>\n        Promise.all(x.iou.join())\n            .then(buildInq(x))\n            .then(i => (i[$$inquirySymbol] ? i.join() : i))\n            .then(y => f(y.fail.join().concat(y.pass.join()))),\n\n    // await all IOUs to resolve, then return a new Inquiry CONVERTS TO PROMISE!\n    await: async (t: number = Infinity): Promise<InquiryMonad> => {\n        // try: generator function. Each IOU = array in for loop as per https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield\n        const timeLimit = new Promise((resolve, reject) =>\n            setTimeout(resolve, t, [Fail('Promise(s) have timed out')])\n        );\n        const awaitPromises = Promise.all(x.iou.join());\n\n        return (\n            Promise.race([timeLimit, awaitPromises])\n                // @ts-ignore\n                .then(buildInq(x))\n                .then((i: any) => (i[$$inquirySymbol] ? i.join() : i))\n                .then((y: any) => InquiryPOf(y))\n        );\n    },\n    [$$inquirySymbol]: true\n});\n\nconst exportInquiryP = {\n    subject: InquiryPSubject,\n    of: InquiryPOf\n};\n\nexport {\n    exportInquiry as Inquiry,\n    exportInquiryP as InquiryP,\n    exportQuestionset as Questionset,\n    exportQuestion as Question,\n    Fail,\n    Pass,\n    IOU,\n    $$inquirySymbol\n};\n"],"sourceRoot":""}