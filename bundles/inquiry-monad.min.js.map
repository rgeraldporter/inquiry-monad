{"version":3,"sources":["webpack://InquiryMonad/webpack/universalModuleDefinition","webpack://InquiryMonad/webpack/bootstrap","webpack://InquiryMonad/./src/symbols.ts","webpack://InquiryMonad/./node_modules/simple-maybe/src/index.js","webpack://InquiryMonad/./src/index.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","$$inquirySymbol","Symbol","$$questionsetSymbol","$$questionSymbol","$$passSymbol","$$failSymbol","$$iouSymbol","$$receiptSymbol","Just","x","isJust","isNothing","inspect","_","map","f","Maybe","of","ap","y","chain","join","fork","g","sequence","Nothing","undefined","simple_maybe_1","symbols_1","noop","$$notFoundSymbol","PromiseEvery","promises","Promise","resolve","results","count","forEach","promise","idx","catch","err","then","valueOrError","length","IOU","concat","head","Array","isArray","tail","isEmpty","Boolean","[object Object]","Pass","fold","answer","Inquiry","informant","subject","fail","iou","pass","questionset","receipt","Receipt","Fail","Question","extract","QuestionOf","console","error","questionTypeError","exportQuestion","Questionset","find","a","RegExp","test","b","warn","exportQuestionset","questionsetTypeError","InquirySubject","inquire","fnName","extractName","fExtractFn","inquireResponse","resp","warnNotPassFail","inquireMap","reduce","inq","ii","inquireAll","questions","q","using","swap","unison","breakpoint","milestone","conclude","cleared","faulted","suffice","scratch","zip","exportInquiry","warnTypeError","InquiryPSubject","InquiryP","InquiryPOf","warnTypeErrorP","buildInq","vals","acc","cur","resolveQs","result","inquireIOU","response","syncronousResult","__awaiter","this","await","t","Infinity","timeLimit","reject","setTimeout","awaitPromises","race","exportInquiryP"],"mappings":"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","file":"inquiry-monad.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"InquiryMonad\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"InquiryMonad\"] = factory();\n\telse\n\t\troot[\"InquiryMonad\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","export const $$inquirySymbol: unique symbol = Symbol();\nexport const $$questionsetSymbol: unique symbol = Symbol();\nexport const $$questionSymbol: unique symbol = Symbol();\nexport const $$passSymbol: unique symbol = Symbol();\nexport const $$failSymbol: unique symbol = Symbol();\nexport const $$iouSymbol: unique symbol = Symbol();\nexport const $$receiptSymbol: unique symbol = Symbol();","const Just = x => ({\n    isJust: true,\n    isNothing: false,\n    inspect: _ => `Just(${x})`,\n    map: f => Maybe.of(f(x)),\n    ap: y => y.map(x),\n    chain: f => f(x),\n    join: _ => x,\n    fork: (_, g) => g(x),\n    sequence: of => x.map(Maybe.of)\n});\n\nconst Nothing = _ => ({\n    isJust: false,\n    isNothing: true,\n    inspect: _ => `Nothing`,\n    map: _ => Nothing(),\n    ap: _ => Nothing(),\n    chain: _ => Nothing(),\n    join: _ => Nothing(),\n    fork: (f, _) => f(),\n    sequence: of => of(Nothing())\n});\n\nconst Maybe = {\n    of: x => x === null || x === undefined ? Nothing() : Just(x)\n};\n\nmodule.exports = {Maybe, Nothing, Just};","import { Maybe } from 'simple-maybe';\n\nimport {\n    Monad,\n    InquiryMonad,\n    IOUMonad,\n    PassFailMonad,\n    PassMonad,\n    FailMonad,\n    InquiryValue,\n    ReceiptMonad,\n    ReceiptValue,\n    QuestionsetMonad,\n    QuestionMonad,\n    QuestionValue\n} from './inquiry-monad';\n\nimport {\n    $$inquirySymbol,\n    $$questionsetSymbol,\n    $$questionSymbol,\n    $$passSymbol,\n    $$failSymbol,\n    $$iouSymbol,\n    $$receiptSymbol\n} from './symbols';\n\nconst noop = (): void => {};\n\nconst $$notFoundSymbol: unique symbol = Symbol('Not found');\n\n// like Promise.all without the fast reject functionality\nconst PromiseEvery = <T>(promises: Promise<T>[]): Promise<any[]> =>\n    new Promise(resolve => {\n        const results: any[] = [];\n        let count = 0;\n        promises.forEach((promise, idx) => {\n            promise\n                .catch(err => err) // pass errs down as (presumably) Fail\n                .then(valueOrError => {\n                    results[idx] = valueOrError;\n                    count += 1;\n                    count === promises.length && resolve(results);\n                });\n        });\n    });\n\nconst IOU = (x: QuestionMonad | Array<QuestionMonad>): IOUMonad => ({\n    map: (f: Function): IOUMonad => IOU(f(x)),\n    chain: (f: Function): any => f(x),\n    ap: (y: Monad): Monad => y.map(x),\n    inspect: (): string => `IOU(${x})`,\n    join: (): QuestionMonad | Array<QuestionMonad> => x,\n    concat: (o: IOUMonad): IOUMonad =>\n        o.chain(\n            (r: any): IOUMonad => IOU((x as Array<QuestionMonad>).concat(r))\n        ),\n    head: (): QuestionMonad | Array<QuestionMonad> =>\n        Array.isArray(x) && x.length ? x[0] : [],\n    tail: (): QuestionMonad | Array<QuestionMonad> =>\n        Array.isArray(x) && x.length ? x[x.length - 1] : [],\n    isEmpty: (): Boolean => Boolean(!Array.isArray(x) || x.length === 0),\n    [$$inquirySymbol]: false,\n    [$$passSymbol]: false,\n    [$$failSymbol]: false,\n    [$$iouSymbol]: true\n});\n\nconst Pass = <T>(x: Array<T> | T): PassMonad => ({\n    map: (f: Function): PassMonad => Pass(f(x)),\n    chain: (f: Function): any => f(x),\n    fold: (f: Function, _: Function): any => f(x),\n    fork: (_: Function, f: Function): any => f(x),\n    head: (): Array<T> | T => (Array.isArray(x) && x.length ? x[0] : []),\n    tail: (): Array<T> | T =>\n        Array.isArray(x) && x.length ? x[x.length - 1] : [],\n    join: (): Array<T> | T => x,\n    inspect: (): string => `Pass(${x})`,\n    concat: (o: PassFailMonad): PassFailMonad =>\n        o.fold((r: any): PassMonad => Pass((x as Array<T>).concat(r)), noop),\n    ap: (y: PassFailMonad): PassMonad =>\n        (y as any)[$$passSymbol] ? y.concat(Pass(x)) : Pass(x),\n    answer: (\n        i: InquiryValue,\n        n: string = '(anonymous)',\n        c: Function = Inquiry\n    ): InquiryMonad => {\n        i.informant([n, Pass(x)]);\n        return c({\n            subject: i.subject,\n            fail: i.fail,\n            iou: i.iou,\n            pass: i.pass.concat(Pass(x)),\n            informant: i.informant,\n            questionset: i.questionset,\n            receipt: i.receipt.concat(Receipt([[n, Pass(x)]]))\n        });\n    },\n    isEmpty: (): Boolean => Boolean(!Array.isArray(x) || x.length === 0),\n    [$$passSymbol]: true,\n    [$$failSymbol]: false,\n    [$$iouSymbol]: false,\n    [$$inquirySymbol]: false\n});\n\nconst Fail = <T>(x: Array<T> | T): FailMonad => ({\n    map: (f: Function): FailMonad => Fail(f(x)),\n    chain: (f: Function): any => f(x),\n    fold: (_: Function, f: Function): any => f(x),\n    fork: (f: Function, _: Function): any => f(x),\n    head: (): Array<T> | T => (Array.isArray(x) && x.length ? x[0] : []),\n    tail: (): Array<T> | T =>\n        Array.isArray(x) && x.length ? x[x.length - 1] : [],\n    join: (): Array<T> | T => x,\n    inspect: (): string => `Fail(${x})`,\n    concat: (o: PassFailMonad): PassFailMonad =>\n        o.fork((r: any): FailMonad => Fail((x as Array<T>).concat(r)), noop),\n    ap: (y: PassFailMonad): FailMonad =>\n        y[$$passSymbol] ? Fail(x) : y.concat(Fail(x)),\n    answer: (\n        i: InquiryValue,\n        n: string = '(anonymous)',\n        c: Function = Inquiry\n    ): InquiryMonad => {\n        i.informant([n, Fail(x)]);\n        return c({\n            subject: i.subject,\n            fail: i.fail.concat(Fail(x)),\n            pass: i.pass,\n            iou: i.iou,\n            informant: i.informant,\n            questionset: i.questionset,\n            receipt: i.receipt.concat(Receipt([[n, Fail(x)]]))\n        });\n    },\n    isEmpty: (): Boolean => Boolean(!Array.isArray(x) || x.length === 0),\n    [$$passSymbol]: false,\n    [$$failSymbol]: true,\n    [$$iouSymbol]: false,\n    [$$inquirySymbol]: false\n});\n\nconst Receipt = (x: Array<ReceiptValue>): ReceiptMonad => ({\n    map: (f: Function): ReceiptMonad => Receipt(f(x)),\n    chain: (f: Function): any => f(x),\n    fold: (_: Function, f: Function): any => f(x),\n    fork: (f: Function, _: Function): any => f(x),\n    head: (): ReceiptValue => x[0],\n    tail: (): ReceiptValue => x[x.length - 1],\n    join: (): Array<ReceiptValue> => x,\n    inspect: (): string => `Receipt(${x})`,\n    isEmpty: (): Boolean => Boolean(!Array.isArray(x) || x.length === 0),\n    concat: (o: ReceiptMonad): ReceiptMonad =>\n        o.chain(\n            (r: any): ReceiptMonad =>\n                Receipt((x as Array<ReceiptValue>).concat(r))\n        ),\n    ap: (y: Monad): Monad => y.map(x),\n    [$$inquirySymbol]: false,\n    [$$receiptSymbol]: true\n});\n\nconst questionTypeError = (x: any): void =>\n    console.error(\n        'Question must be passed parameters that adhere to the documented type. Value that was passed:',\n        x\n    );\n\nconst Question = (x: QuestionValue): QuestionMonad => ({\n    map: (f: Function): QuestionMonad => Question(f(x)),\n    chain: (f: Function): any => f(x),\n    ap: (y: Monad): Monad => y.map(x),\n    inspect: (): string => `Question(${x})`,\n    join: (): any => x,\n    call: (i: InquiryMonad): PassFailMonad => x[1](i.join().subject.join()),\n    extract: (): Function => x[1],\n    name: (): string | RegExp => x[0],\n    [$$questionSymbol]: true\n});\n\nconst QuestionOf = (x: QuestionValue): QuestionMonad | void =>\n    Array.isArray(x) ? Question(x) : questionTypeError(x);\n\nconst exportQuestion = {\n    of: QuestionOf\n};\n\nconst Questionset = (x: Array<QuestionValue>): QuestionsetMonad => ({\n    map: (f: Function): QuestionsetMonad => Questionset(f(x)),\n    chain: (f: Function): any => f(x),\n    ap: (y: Monad): Monad => y.map(x),\n    inspect: (): string => `Questionset(${x})`,\n    join: (): any => x,\n    concat: (o: QuestionsetMonad): QuestionsetMonad =>\n        o.chain(\n            (r: any): QuestionsetMonad =>\n                Questionset((x as Array<QuestionValue>).concat(r))\n        ),\n    find: (a: string): Monad =>\n        Maybe.of(x.find(i => RegExp(i[0]).test(a)))\n            .map((b: QuestionValue): Function => b[1])\n            .fork((): symbol => {\n                console.warn('Question was not found: ', a);\n                return $$notFoundSymbol;\n            }, (c: Function): Function => c),\n    [$$questionsetSymbol]: true\n});\n\nconst questionsetTypeError = (x: any): void =>\n    console.error(\n        'Questionset must be passed parameters that adhere to the documented type. Value that was passed:',\n        x\n    );\n\nconst QuestionsetOf = (x: Array<QuestionValue>): QuestionsetMonad | void =>\n    Array.isArray(x) ? Questionset(x) : questionsetTypeError(x);\n\nconst exportQuestionset = {\n    of: QuestionsetOf\n};\n\nconst InquirySubject = (x: any | InquiryMonad): InquiryMonad =>\n    (x as any)[$$inquirySymbol]\n        ? x\n        : Inquiry({\n              subject: Maybe.of(x),\n              fail: Fail([]),\n              pass: Pass([]),\n              iou: IOU([]),\n              informant: <T>(_: T) => _,\n              questionset: Questionset([['', noop]]),\n              receipt: Receipt([])\n          });\n\nconst warnTypeError = <T>(x: T): InquiryMonad => {\n    console.warn(\n        'Inquiry.of requires properties: subject, fail, pass, iou, informant, questionset, receipt. Converting to Inquiry.subject().'\n    );\n    return InquirySubject(x);\n};\n\n// @todo validate constructor via Symbol\nconst InquiryOf = (x: InquiryValue): InquiryMonad =>\n    'subject' in x &&\n    'fail' in x &&\n    'pass' in x &&\n    'iou' in x &&\n    'informant' in x &&\n    'questionset' in x &&\n    'receipt' in x\n        ? Inquiry(x)\n        : warnTypeError(x);\n\nconst Inquiry = (x: InquiryValue): InquiryMonad => ({\n    // Inquire: core method\n    // You may pass a Function, a QuestionMonad (with a function), or a string which will look up\n    //  in the current Inquiry's questionset.\n    // @todo in 1.x, deprecate Function as an option\n    inquire: (f: Function | string | QuestionMonad): InquiryMonad => {\n        const extractName = (f: string | QuestionMonad) =>\n            (f as QuestionMonad)[$$questionSymbol]\n                ? (f as QuestionMonad).name()\n                : f;\n        const fnName =\n            typeof f === 'function' ? f.name || 'anon' : extractName(f);\n        const fExtractFn = (f as any)[$$questionSymbol]\n            ? (f as QuestionMonad).extract()\n            : f;\n        const fIsFn = typeof fExtractFn === 'function';\n        const inquire = fIsFn\n            ? fExtractFn\n            : (x.questionset as QuestionsetMonad).find(fExtractFn);\n\n        const warnNotPassFail = (resp: any): InquiryMonad => {\n            console.warn(\n                'inquire was passed a function that does not return Pass or Fail:',\n                fnName\n            );\n            console.warn('response was:', resp);\n            return Inquiry(x);\n        };\n        const inquireResponse =\n            typeof inquire === 'function' ? inquire(x.subject.join()) : {};\n\n        return inquireResponse[$$failSymbol] ||\n            inquireResponse[$$passSymbol] ||\n            inquireResponse[$$inquirySymbol]\n            ? inquireResponse.answer(x, fnName, Inquiry)\n            : warnNotPassFail([inquireResponse, fnName]);\n    },\n\n    inquireMap: (\n        f: Function | string | QuestionMonad,\n        i: Array<any>\n    ): InquiryMonad =>\n        i.reduce(\n            (inq, ii) => {\n                const extractName = (f: string | QuestionMonad) =>\n                    (f as QuestionMonad)[$$questionSymbol]\n                        ? (f as QuestionMonad).name()\n                        : f;\n                const fnName =\n                    typeof f === 'function' ? f.name || 'anon' : extractName(f);\n                const fExtractFn = (f as any)[$$questionSymbol]\n                    ? (f as QuestionMonad).extract()\n                    : f;\n                const fIsFn = typeof fExtractFn === 'function';\n                const inquire = fIsFn\n                    ? fExtractFn\n                    : (x.questionset as QuestionsetMonad).find(fExtractFn);\n\n                const warnNotPassFail = (resp: any): InquiryMonad => {\n                    console.warn(\n                        'inquire was passed a function that does not return Pass or Fail:',\n                        fnName\n                    );\n                    console.warn('response was:', resp);\n                    return inq;\n                };\n                const inquireResponse =\n                    typeof inquire === 'function'\n                        ? inquire(ii)(inq.join().subject.join())\n                        : {};\n\n                // each return aggregates new contained value through exit\n                return inquireResponse[$$failSymbol] ||\n                    inquireResponse[$$passSymbol] ||\n                    inquireResponse[$$inquirySymbol]\n                    ? inquireResponse.answer(inq.join(), fnName, Inquiry)\n                    : warnNotPassFail([inquireResponse, fnName]);\n            },\n\n            // initial Inquiry will be what is in `x` now\n            Inquiry({\n                subject: x.subject,\n                iou: x.iou,\n                fail: x.fail,\n                pass: x.pass,\n                informant: x.informant,\n                questionset: x.questionset,\n                receipt: x.receipt\n            })\n        ),\n\n    inquireAll: (): InquiryMonad =>\n        (x.questionset as QuestionsetMonad).chain(\n            (questions: Array<QuestionValue>): InquiryMonad =>\n                questions.reduce(\n                    (inq: InquiryMonad, q: QuestionValue): InquiryMonad =>\n                        inq.inquire(QuestionOf(q)),\n                    Inquiry(x)\n                )\n        ),\n\n    using: (a: QuestionsetMonad): InquiryMonad =>\n        Inquiry({\n            subject: x.subject,\n            iou: x.iou,\n            fail: x.fail,\n            pass: x.pass,\n            informant: x.informant,\n            questionset: a,\n            receipt: x.receipt\n        }),\n\n    // Informant: for spying/logging/observable\n    informant: (f: Function): InquiryMonad =>\n        Inquiry({\n            subject: x.subject,\n            iou: x.iou,\n            fail: x.fail,\n            pass: x.pass,\n            informant: f,\n            questionset: x.questionset,\n            receipt: x.receipt\n        }),\n\n    inspect: (): string =>\n        `Inquiry(${x.fail.inspect()} ${x.pass.inspect()} ${x.iou.inspect()}`,\n\n    // Flow control: swap pass/fail\n    swap: (): InquiryMonad =>\n        Inquiry({\n            subject: x.subject,\n            iou: x.iou,\n            fail: Fail(x.pass.join()),\n            pass: Pass(x.fail.join()),\n            informant: x.informant,\n            questionset: x.questionset,\n            receipt: x.receipt\n        }),\n\n    // Mapping across both branches\n    unison: (\n        f: Function\n    ): InquiryMonad => // apply a single map to both fail & pass (e.g. sort)\n        Inquiry({\n            subject: x.subject,\n            iou: x.iou,\n            fail: Fail(f(x.fail.join())),\n            pass: Pass(f(x.pass.join())),\n            informant: x.informant,\n            questionset: x.questionset,\n            receipt: x.receipt\n        }),\n\n    // standard Monad methods\n    map: (f: Function): InquiryMonad => InquirySubject(f(x)),\n    ap: (y: Monad): Monad => y.map(x),\n    chain: (f: Function): any => f(x),\n    join: (): InquiryValue => x,\n\n    // execute the provided function if there are failures, else continue\n    breakpoint: (f: Function): InquiryMonad =>\n        x.fail.join().length ? Inquiry(f(x)) : Inquiry(x),\n\n    // execute the provided function if there are passes, else continue\n    milestone: (f: Function): InquiryMonad =>\n        x.pass.join().length ? Inquiry(f(x)) : Inquiry(x),\n\n    // internal method: execute informant, return new InquiryP() based on updated results\n    answer: (i: InquiryValue, n: string, _: Function): InquiryMonad => {\n        i.informant([n, Inquiry(x)]);\n        return Inquiry({\n            subject: i.subject,\n            iou: i.iou,\n            fail: i.fail.concat(x.fail),\n            pass: i.pass.concat(x.pass),\n            informant: i.informant,\n            questionset: i.questionset,\n            receipt: i.receipt\n        });\n    },\n\n    // Unwrap methods\n\n    // unwraps, mapping for both branches, full value returned\n    conclude: (f: Function, g: Function): InquiryValue => ({\n        subject: x.subject,\n        iou: x.iou,\n        fail: f(x.fail),\n        pass: g(x.pass),\n        informant: x.informant,\n        questionset: x.questionset,\n        receipt: x.receipt\n    }),\n\n    // If there are no fails, handoff aggregated passes to supplied function; if any fails, return noop\n    cleared: (f: Function): any | void =>\n        x.fail.isEmpty() ? f(x.pass) : noop(),\n\n    // If there are fails, handoff aggregated fails to supplied function; if no fails, return noop\n    faulted: (f: Function): void | any =>\n        x.fail.isEmpty() ? noop() : f(x.fail),\n\n    // If there are passes, handoff aggregated passes to supplied function; if no passes, return noop\n    suffice: (f: Function): void | any =>\n        x.pass.isEmpty() ? noop() : f(x.pass),\n\n    // If there are no passes, handoff aggregated fails to supplied function; if any passes, return noop\n    scratch: (f: Function): any | void =>\n        x.pass.isEmpty() ? f(x.fail) : noop(),\n\n    // unwrap left if any fails, right if not\n    fork: (f: Function, g: Function): any =>\n        x.fail.join().length ? f(x.fail) : g(x.pass),\n\n    // unwrap left if any passes, right if not\n    fold: (f: Function, g: Function): any =>\n        x.pass.join().length ? f(x.pass) : g(x.fail),\n\n    // return a merged pass/fail\n    zip: (f: Function): Array<any> => f(x.fail.join().concat(x.pass.join())), // return a concat of pass/fails\n\n    [$$inquirySymbol]: true\n});\n\nconst exportInquiry = {\n    subject: InquirySubject,\n    of: InquiryOf\n};\n\nconst InquiryPSubject = (x: any | InquiryMonad): InquiryMonad =>\n    (x as any)[$$inquirySymbol]\n        ? x\n        : InquiryP({\n              subject: Maybe.of(x),\n              fail: Fail([]),\n              pass: Pass([]),\n              iou: IOU([]),\n              informant: <T>(_: T) => _,\n              questionset: Questionset([['', noop]]),\n              receipt: Receipt([])\n          });\n\nconst warnTypeErrorP = <T>(x: T): InquiryMonad => {\n    console.warn(\n        'InquiryP.of requires properties: subject, fail, pass, iou, informant, questionset, receipt. Converting to InquiryP.subject().'\n    );\n    return InquiryPSubject(x);\n};\n\nconst InquiryPOf = (x: InquiryValue): InquiryMonad =>\n    'subject' in x &&\n    'fail' in x &&\n    'pass' in x &&\n    'iou' in x &&\n    'informant' in x &&\n    'questionset' in x &&\n    'receipt' in x\n        ? InquiryP(x)\n        : warnTypeErrorP(x);\n\nconst buildInq = <T>(x: T) => (vals: Array<any>): InquiryMonad =>\n    vals\n        ? vals.reduce(\n              (acc, cur) =>\n                  cur ? cur[1].answer(acc, cur[0], InquiryP).join() : acc,\n              x\n          )\n        : x;\n\n// this is a bit complex, so here it goes:\n// Take all our IOUs (Questions), extract and resolve their Promises\n// then take those results apply to a tuple with the question name/description\nconst resolveQs = (x: InquiryValue) =>\n    x.iou.join().length\n        ? x.iou.join().map(\n              (q: QuestionMonad): Promise<PassFailMonad> =>\n                  q\n                      .extract()()\n                      .catch((err: any) => err)\n                      .then(\n                          (result: PassFailMonad): Promise<Array<any>> =>\n                              Promise.resolve([q.name(), result])\n                      )\n          )\n        : [Promise.resolve()];\n\nconst InquiryP = (x: InquiryValue): InquiryMonad => ({\n    inquire: (f: Function | string | QuestionMonad) => {\n        const extractName = (f: string | QuestionMonad) =>\n            (f as QuestionMonad)[$$questionSymbol]\n                ? (f as QuestionMonad).name()\n                : f;\n        const fnName =\n            typeof f === 'function' ? f.name || 'anon' : extractName(f);\n        const fExtractFn = (f as any)[$$questionSymbol]\n            ? (f as QuestionMonad).extract()\n            : f;\n        const fIsFn = typeof fExtractFn === 'function';\n        const inquire = fIsFn\n            ? fExtractFn\n            : (x.questionset as QuestionsetMonad).find(fExtractFn);\n\n        const warnNotPassFail = (resp: any): InquiryMonad => {\n            console.warn(\n                'inquire was passed a function that does not return Pass or Fail:',\n                fnName\n            );\n            console.warn('response was:', resp);\n            return InquiryP(x);\n        };\n\n        const inquireResponse =\n            typeof inquire === 'function' ? inquire(x.subject.join()) : {};\n\n        const syncronousResult = (response: any): InquiryMonad =>\n            response[$$failSymbol] ||\n            response[$$passSymbol] ||\n            response[$$inquirySymbol]\n                ? response.answer(x, fnName, InquiryP)\n                : warnNotPassFail([inquireResponse, fnName]);\n\n        const inquireIOU = inquireResponse.then\n            ? QuestionOf([fnName as string, () => inquireResponse])\n            : false;\n\n        return inquireIOU\n            ? InquiryP({\n                  subject: x.subject,\n                  fail: x.fail,\n                  pass: x.pass,\n                  iou: x.iou.concat(IOU([inquireIOU])),\n                  informant: x.informant,\n                  questionset: x.questionset,\n                  receipt: x.receipt\n              })\n            : syncronousResult(inquireResponse);\n    },\n\n    inquireMap: (\n        f: Function | string | QuestionMonad,\n        i: Array<any>\n    ): InquiryMonad =>\n        i.reduce(\n            (inq, ii) => {\n                const extractName = (f: string | QuestionMonad) =>\n                    (f as QuestionMonad)[$$questionSymbol]\n                        ? (f as QuestionMonad).name()\n                        : f;\n                const fnName =\n                    typeof f === 'function' ? f.name || 'anon' : extractName(f);\n                const fExtractFn = (f as any)[$$questionSymbol]\n                    ? (f as QuestionMonad).extract()\n                    : f;\n                const fIsFn = typeof fExtractFn === 'function';\n                const inquire = fIsFn\n                    ? fExtractFn\n                    : (x.questionset as QuestionsetMonad).find(fExtractFn);\n\n                const warnNotPassFail = (resp: any) => {\n                    console.warn(\n                        'inquire was passed a function that does not return Pass or Fail:',\n                        fnName\n                    );\n                    console.warn('response was:', resp);\n                    return inq;\n                };\n                const inquireResponse =\n                    typeof inquire === 'function'\n                        ? inquire(ii)(inq.join().subject.join())\n                        : {};\n\n                const syncronousResult = (response: any): InquiryMonad =>\n                    response[$$failSymbol] ||\n                    response[$$passSymbol] ||\n                    response[$$inquirySymbol]\n                        ? response.answer(inq.join(), fnName, InquiryP)\n                        : warnNotPassFail(response);\n\n                return inquireResponse.then\n                    ? InquiryP({\n                          subject: inq.join().subject,\n                          fail: inq.join().fail,\n                          pass: inq.join().pass,\n                          iou: inq.join().iou.concat(IOU([inquireResponse])),\n                          informant: inq.join().informant,\n                          questionset: inq.join().questionset,\n                          receipt: inq.join().receipt\n                      })\n                    : syncronousResult(inquireResponse);\n            },\n\n            // initial Inquiry will be what is in `x` now\n            InquiryP({\n                subject: x.subject,\n                iou: x.iou,\n                fail: x.fail,\n                pass: x.pass,\n                informant: x.informant,\n                questionset: x.questionset,\n                receipt: x.receipt\n            })\n        ),\n\n    inquireAll: (): InquiryMonad =>\n        (x.questionset as QuestionsetMonad).chain(\n            (questions: Array<QuestionValue>): InquiryMonad =>\n                questions.reduce(\n                    (inq: InquiryMonad, q: QuestionValue): InquiryMonad =>\n                        inq.inquire(QuestionOf(q)),\n                    InquiryP(x)\n                )\n        ),\n\n    using: (a: QuestionsetMonad): InquiryMonad =>\n        InquiryP({\n            subject: x.subject,\n            iou: x.iou,\n            fail: x.fail,\n            pass: x.pass,\n            informant: x.informant,\n            questionset: a,\n            receipt: x.receipt\n        }),\n\n    // Informant: for spying/logging/observable\n    informant: (f: Function): InquiryMonad =>\n        InquiryP({\n            subject: x.subject,\n            iou: x.iou,\n            fail: x.fail,\n            pass: x.pass,\n            informant: f,\n            questionset: x.questionset,\n            receipt: x.receipt\n        }),\n\n    inspect: (): string =>\n        `InquiryP(${x.fail.inspect()} ${x.pass.inspect()} ${x.iou.inspect()}`,\n\n    // Flow control: swap left/right pass/fail (iou is untouched)\n    swap: (): InquiryMonad =>\n        InquiryP({\n            subject: x.subject,\n            iou: x.iou,\n            fail: Fail(x.pass.join()),\n            pass: Pass(x.fail.join()),\n            informant: x.informant,\n            questionset: x.questionset,\n            receipt: x.receipt\n        }),\n\n    // Mapping across both branches\n    unison: (\n        f: Function\n    ): InquiryMonad => // apply a single map to both fail & pass (e.g. sort), iou untouched\n        InquiryP({\n            subject: x.subject,\n            iou: x.iou,\n            fail: Fail(f(x.fail.join())),\n            pass: Pass(f(x.pass.join())),\n            informant: x.informant,\n            questionset: x.questionset,\n            receipt: x.receipt\n        }),\n\n    // Standard monad methods - note that while these work, remember that `x` is a typed Object\n    map: (f: Function): InquiryMonad => InquiryPSubject(f(x)), // cast required for now\n    ap: (y: Monad): Monad => y.map(x),\n    chain: (f: Function): any => f(x),\n    join: (): InquiryValue => x,\n\n    // execute the provided function if there are failures, else continue\n    breakpoint: (f: Function): InquiryMonad =>\n        x.fail.join().length ? InquiryP(f(x)) : InquiryP(x),\n\n    // execute the provided function if there are passes, else continue\n    milestone: (f: Function): InquiryMonad =>\n        x.pass.join().length ? InquiryP(f(x)) : InquiryP(x),\n\n    // internal method: execute informant, return new InquiryP() based on updated results\n    answer: (i: InquiryValue, n: string, _: Function): InquiryMonad => {\n        i.informant([n, InquiryP(x)]);\n        return InquiryP({\n            subject: i.subject,\n            iou: i.iou,\n            fail: i.fail.concat(x.fail),\n            pass: i.pass.concat(x.pass),\n            informant: i.informant,\n            questionset: i.questionset,\n            receipt: i.receipt\n        });\n    },\n\n    // Unwrapping methods: all return Promises, all complete outstanding IOUs\n\n    // Unwraps the Inquiry after ensuring all IOUs are completed\n    conclude: async (f: Function, g: Function): Promise<InquiryValue> => {\n        return PromiseEvery(resolveQs(x))\n            .then(buildInq(x))\n            .then(i => (i[$$inquirySymbol] ? i.join() : i))\n            .then(y => ({\n                subject: y.subject,\n                iou: y.iou,\n                fail: f(y.fail),\n                pass: g(y.pass),\n                informant: y.informant,\n                questionset: y.questionset,\n                receipt: y.receipt\n            }));\n    },\n\n    // If no fails, handoff aggregated passes to supplied function; if fails, return noop\n    cleared: async (f: Function): Promise<InquiryMonad | Array<any>> =>\n        PromiseEvery(resolveQs(x))\n            .then(buildInq(x))\n            .then(i => (i[$$inquirySymbol] ? i.join() : i))\n            .then(y => (y.fail.isEmpty() ? f(y.pass) : noop()))\n            .catch(err => console.error('err', err)),\n\n    // If fails, handoff aggregated fails to supplied function; if no fails, return noop\n    faulted: async (f: Function): Promise<InquiryMonad | Array<any>> =>\n        PromiseEvery(resolveQs(x))\n            .then(buildInq(x))\n            .then(i => (i[$$inquirySymbol] ? i.join() : i))\n            .then(y => (y.fail.isEmpty() ? noop() : f(y.fail))),\n\n    // If any passes, handoff aggregated passes to supplied function; if no passes, return noop\n    suffice: async (f: Function): Promise<InquiryMonad | Array<any>> =>\n        PromiseEvery(resolveQs(x))\n            .then(buildInq(x))\n            .then(i => (i[$$inquirySymbol] ? i.join() : i))\n            .then(y => (y.pass.isEmpty() ? noop() : f(y.pass)))\n            .catch(err => console.error('err', err)),\n\n    // If no passes, handoff aggregated fails to supplied function; if any passes, return noop\n    scratch: async (f: Function): Promise<InquiryMonad | Array<any>> =>\n        PromiseEvery(resolveQs(x))\n            .then(buildInq(x))\n            .then(i => (i[$$inquirySymbol] ? i.join() : i))\n            .then(y => (y.pass.isEmpty() ? f(y.fail) : noop())),\n\n    // Take left function and hands off fails if any, otherwise takes right function and hands off passes to that function\n    fork: async (f: Function, g: Function): Promise<Array<any>> =>\n        PromiseEvery(resolveQs(x))\n            .then(buildInq(x))\n            .then(i => (i[$$inquirySymbol] ? i.join() : i))\n            .then(y => (y.fail.join().length ? f(y.fail) : g(y.pass))),\n\n    // Take left function and hands off fails if any, otherwise takes right function and hands off passes to that function\n    fold: async (f: Function, g: Function): Promise<Array<any>> =>\n        PromiseEvery(resolveQs(x))\n            .then(buildInq(x))\n            .then(i => (i[$$inquirySymbol] ? i.join() : i))\n            .then(y => (y.pass.join().length ? f(y.pass) : g(y.fail))),\n\n    // return a Promise containing a merged fail/pass resultset array\n    zip: async (f: Function): Promise<Array<any>> =>\n        PromiseEvery(resolveQs(x))\n            .then(buildInq(x))\n            .then(i => (i[$$inquirySymbol] ? i.join() : i))\n            .then(y => f(y.fail.join().concat(y.pass.join()))),\n\n    // await all IOUs to resolve, then return a new Inquiry CONVERTS TO PROMISE!\n    await: async (t: number = Infinity): Promise<InquiryMonad> => {\n        // try: generator function. Each IOU = array in for loop as per https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield\n        const timeLimit = new Promise((resolve, reject) =>\n            setTimeout(resolve, t, [\n                'timeout',\n                Fail('Promise(s) have timed out')\n            ])\n        );\n        const awaitPromises = PromiseEvery(resolveQs(x));\n\n        return (\n            Promise.race([timeLimit, awaitPromises])\n                // @ts-ignore\n                .then(buildInq(x))\n                .then((i: any) => (i[$$inquirySymbol] ? i.join() : i))\n                .then((y: any) => InquiryPOf(y))\n        );\n    },\n    [$$inquirySymbol]: true\n});\n\nconst exportInquiryP = {\n    subject: InquiryPSubject,\n    of: InquiryPOf\n};\n\nexport {\n    exportInquiry as Inquiry,\n    exportInquiryP as InquiryP,\n    exportQuestionset as Questionset,\n    exportQuestion as Question,\n    Receipt,\n    Fail,\n    Pass,\n    IOU,\n    $$inquirySymbol,\n    $$questionSymbol,\n    $$passSymbol,\n    $$failSymbol\n};\n"],"sourceRoot":""}