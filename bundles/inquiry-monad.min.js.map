{"version":3,"sources":["webpack://InquiryMonad/webpack/universalModuleDefinition","webpack://InquiryMonad/webpack/bootstrap","webpack://InquiryMonad/./src/symbols.ts","webpack://InquiryMonad/./node_modules/simple-maybe/src/index.js","webpack://InquiryMonad/./src/index.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","$$inquirySymbol","Symbol","$$questionsetSymbol","$$questionSymbol","$$passSymbol","$$failSymbol","$$iouSymbol","$$receiptSymbol","Just","x","isJust","isNothing","inspect","_","map","f","Maybe","of","ap","y","chain","join","fork","g","sequence","Nothing","undefined","simple_maybe_1","symbols_1","noop","$$notFoundSymbol","IOU","concat","head","Array","isArray","length","tail","isEmpty","Boolean","[object Object]","Pass","fold","answer","Inquiry","informant","subject","fail","iou","pass","questionset","receipt","Receipt","Fail","Question","extract","QuestionOf","console","error","questionTypeError","exportQuestion","Questionset","find","a","RegExp","test","b","warn","exportQuestionset","questionsetTypeError","InquirySubject","inquire","fnName","extractName","fExtractFn","inquireResponse","resp","warnNotPassFail","inquireMap","reduce","inq","ii","inquireAll","questions","q","using","swap","unison","breakpoint","milestone","conclude","cleared","faulted","suffice","scratch","zip","exportInquiry","warnTypeError","InquiryPSubject","InquiryP","InquiryPOf","warnTypeErrorP","buildInq","vals","acc","cur","resolveQs","then","result","Promise","resolve","inquireIOU","response","syncronousResult","__awaiter","this","all","catch","err","await","t","Infinity","timeLimit","reject","setTimeout","awaitPromises","race","exportInquiryP"],"mappings":"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","file":"inquiry-monad.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"InquiryMonad\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"InquiryMonad\"] = factory();\n\telse\n\t\troot[\"InquiryMonad\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","export const $$inquirySymbol: unique symbol = Symbol();\nexport const $$questionsetSymbol: unique symbol = Symbol();\nexport const $$questionSymbol: unique symbol = Symbol();\nexport const $$passSymbol: unique symbol = Symbol();\nexport const $$failSymbol: unique symbol = Symbol();\nexport const $$iouSymbol: unique symbol = Symbol();\nexport const $$receiptSymbol: unique symbol = Symbol();","const Just = x => ({\n    isJust: true,\n    isNothing: false,\n    inspect: _ => `Just(${x})`,\n    map: f => Maybe.of(f(x)),\n    ap: y => y.map(x),\n    chain: f => f(x),\n    join: _ => x,\n    fork: (_, g) => g(x),\n    sequence: of => x.map(Maybe.of)\n});\n\nconst Nothing = _ => ({\n    isJust: false,\n    isNothing: true,\n    inspect: _ => `Nothing`,\n    map: _ => Nothing(),\n    ap: _ => Nothing(),\n    chain: _ => Nothing(),\n    join: _ => Nothing(),\n    fork: (f, _) => f(),\n    sequence: of => of(Nothing())\n});\n\nconst Maybe = {\n    of: x => x === null || x === undefined ? Nothing() : Just(x)\n};\n\nmodule.exports = {Maybe, Nothing, Just};","import { Maybe } from 'simple-maybe';\n\nimport {\n    Monad,\n    InquiryMonad,\n    IOUMonad,\n    PassFailMonad,\n    PassMonad,\n    FailMonad,\n    InquiryValue,\n    ReceiptMonad,\n    ReceiptValue,\n    QuestionsetMonad,\n    QuestionMonad,\n    QuestionValue\n} from './inquiry-monad';\n\nimport {\n    $$inquirySymbol,\n    $$questionsetSymbol,\n    $$questionSymbol,\n    $$passSymbol,\n    $$failSymbol,\n    $$iouSymbol,\n    $$receiptSymbol\n} from './symbols';\n\nconst noop = (): void => {};\n\nconst $$notFoundSymbol: unique symbol = Symbol('Not found');\n\nconst IOU = (x: QuestionMonad | Array<QuestionMonad>): IOUMonad => ({\n    map: (f: Function): IOUMonad => IOU(f(x)),\n    chain: (f: Function): any => f(x),\n    ap: (y: Monad): Monad => y.map(x),\n    inspect: (): string => `IOU(${x})`,\n    join: (): QuestionMonad | Array<QuestionMonad> => x,\n    concat: (o: IOUMonad): IOUMonad =>\n        o.chain(\n            (r: any): IOUMonad => IOU((x as Array<QuestionMonad>).concat(r))\n        ),\n    head: (): QuestionMonad | Array<QuestionMonad> =>\n        Array.isArray(x) && x.length ? x[0] : [],\n    tail: (): QuestionMonad | Array<QuestionMonad> =>\n        Array.isArray(x) && x.length ? x[x.length - 1] : [],\n    isEmpty: (): Boolean => Boolean(!Array.isArray(x) || x.length === 0),\n    [$$inquirySymbol]: false,\n    [$$passSymbol]: false,\n    [$$failSymbol]: false,\n    [$$iouSymbol]: true\n});\n\nconst Pass = <T>(x: Array<T> | T): PassMonad => ({\n    map: (f: Function): PassMonad => Pass(f(x)),\n    chain: (f: Function): any => f(x),\n    fold: (f: Function, _: Function): any => f(x),\n    fork: (_: Function, f: Function): any => f(x),\n    head: (): Array<T> | T => (Array.isArray(x) && x.length ? x[0] : []),\n    tail: (): Array<T> | T =>\n        Array.isArray(x) && x.length ? x[x.length - 1] : [],\n    join: (): Array<T> | T => x,\n    inspect: (): string => `Pass(${x})`,\n    concat: (o: PassFailMonad): PassFailMonad =>\n        o.fold((r: any): PassMonad => Pass((x as Array<T>).concat(r)), noop),\n    ap: (y: PassFailMonad): PassMonad =>\n        (y as any)[$$passSymbol] ? y.concat(Pass(x)) : Pass(x),\n    answer: (\n        i: InquiryValue,\n        n: string = '(anonymous)',\n        c: Function = Inquiry\n    ): InquiryMonad => {\n        i.informant([n, Pass(x)]);\n        return c({\n            subject: i.subject,\n            fail: i.fail,\n            iou: i.iou,\n            pass: i.pass.concat(Pass(x)),\n            informant: i.informant,\n            questionset: i.questionset,\n            receipt: i.receipt.concat(Receipt([[n, Pass(x)]]))\n        });\n    },\n    isEmpty: (): Boolean => Boolean(!Array.isArray(x) || x.length === 0),\n    [$$passSymbol]: true,\n    [$$failSymbol]: false,\n    [$$iouSymbol]: false,\n    [$$inquirySymbol]: false\n});\n\nconst Fail = <T>(x: Array<T> | T): FailMonad => ({\n    map: (f: Function): FailMonad => Fail(f(x)),\n    chain: (f: Function): any => f(x),\n    fold: (_: Function, f: Function): any => f(x),\n    fork: (f: Function, _: Function): any => f(x),\n    head: (): Array<T> | T => (Array.isArray(x) && x.length ? x[0] : []),\n    tail: (): Array<T> | T =>\n        Array.isArray(x) && x.length ? x[x.length - 1] : [],\n    join: (): Array<T> | T => x,\n    inspect: (): string => `Fail(${x})`,\n    concat: (o: PassFailMonad): PassFailMonad =>\n        o.fork((r: any): FailMonad => Fail((x as Array<T>).concat(r)), noop),\n    ap: (y: PassFailMonad): FailMonad =>\n        y[$$passSymbol] ? Fail(x) : y.concat(Fail(x)),\n    answer: (\n        i: InquiryValue,\n        n: string = '(anonymous)',\n        c: Function = Inquiry\n    ): InquiryMonad => {\n        i.informant([n, Fail(x)]);\n        return c({\n            subject: i.subject,\n            fail: i.fail.concat(Fail(x)),\n            pass: i.pass,\n            iou: i.iou,\n            informant: i.informant,\n            questionset: i.questionset,\n            receipt: i.receipt.concat(Receipt([[n, Fail(x)]]))\n        });\n    },\n    isEmpty: (): Boolean => Boolean(!Array.isArray(x) || x.length === 0),\n    [$$passSymbol]: false,\n    [$$failSymbol]: true,\n    [$$iouSymbol]: false,\n    [$$inquirySymbol]: false\n});\n\nconst Receipt = (x: Array<ReceiptValue>): ReceiptMonad => ({\n    map: (f: Function): ReceiptMonad => Receipt(f(x)),\n    chain: (f: Function): any => f(x),\n    fold: (_: Function, f: Function): any => f(x),\n    fork: (f: Function, _: Function): any => f(x),\n    head: (): ReceiptValue => x[0],\n    tail: (): ReceiptValue => x[x.length - 1],\n    join: (): Array<ReceiptValue> => x,\n    inspect: (): string => `Receipt(${x})`,\n    isEmpty: (): Boolean => Boolean(!Array.isArray(x) || x.length === 0),\n    concat: (o: ReceiptMonad): ReceiptMonad =>\n        o.chain(\n            (r: any): ReceiptMonad =>\n                Receipt((x as Array<ReceiptValue>).concat(r))\n        ),\n    ap: (y: Monad): Monad => y.map(x),\n    [$$inquirySymbol]: false,\n    [$$receiptSymbol]: true\n});\n\nconst questionTypeError = (x: any): void =>\n    console.error(\n        'Question must be passed parameters that adhere to the documented type. Value that was passed:',\n        x\n    );\n\nconst Question = (x: QuestionValue): QuestionMonad => ({\n    map: (f: Function): QuestionMonad => Question(f(x)),\n    chain: (f: Function): any => f(x),\n    ap: (y: Monad): Monad => y.map(x),\n    inspect: (): string => `Question(${x})`,\n    join: (): any => x,\n    call: (i: InquiryMonad): PassFailMonad => x[1](i.join().subject.join()),\n    extract: (): Function => x[1],\n    name: (): string | RegExp => x[0],\n    [$$questionSymbol]: true\n});\n\nconst QuestionOf = (x: QuestionValue): QuestionMonad | void =>\n    Array.isArray(x) ? Question(x) : questionTypeError(x);\n\nconst exportQuestion = {\n    of: QuestionOf\n};\n\nconst Questionset = (x: Array<QuestionValue>): QuestionsetMonad => ({\n    map: (f: Function): QuestionsetMonad => Questionset(f(x)),\n    chain: (f: Function): any => f(x),\n    ap: (y: Monad): Monad => y.map(x),\n    inspect: (): string => `Questionset(${x})`,\n    join: (): any => x,\n    concat: (o: QuestionsetMonad): QuestionsetMonad =>\n        o.chain(\n            (r: any): QuestionsetMonad =>\n                Questionset((x as Array<QuestionValue>).concat(r))\n        ),\n    find: (a: string): Monad =>\n        Maybe.of(x.find(i => RegExp(i[0]).test(a)))\n            .map((b: QuestionValue): Function => b[1])\n            .fork((): symbol => {\n                console.warn('Question was not found: ', a);\n                return $$notFoundSymbol;\n            }, (c: Function): Function => c),\n    [$$questionsetSymbol]: true\n});\n\nconst questionsetTypeError = (x: any): void =>\n    console.error(\n        'Questionset must be passed parameters that adhere to the documented type. Value that was passed:',\n        x\n    );\n\nconst QuestionsetOf = (x: Array<QuestionValue>): QuestionsetMonad | void =>\n    Array.isArray(x) ? Questionset(x) : questionsetTypeError(x);\n\nconst exportQuestionset = {\n    of: QuestionsetOf\n};\n\nconst InquirySubject = (x: any | InquiryMonad): InquiryMonad =>\n    (x as any)[$$inquirySymbol]\n        ? x\n        : Inquiry({\n              subject: Maybe.of(x),\n              fail: Fail([]),\n              pass: Pass([]),\n              iou: IOU([]),\n              informant: <T>(_: T) => _,\n              questionset: Questionset([['', noop]]),\n              receipt: Receipt([])\n          });\n\nconst warnTypeError = <T>(x: T): InquiryMonad => {\n    console.warn(\n        'Inquiry.of requires properties: subject, fail, pass, iou, informant, questionset, receipt. Converting to Inquiry.subject().'\n    );\n    return InquirySubject(x);\n};\n\n// @todo validate constructor via Symbol\n// @todo add receipts property\nconst InquiryOf = (x: InquiryValue): InquiryMonad =>\n    'subject' in x &&\n    'fail' in x &&\n    'pass' in x &&\n    'iou' in x &&\n    'informant' in x &&\n    'questionset' in x &&\n    'receipt' in x\n        ? Inquiry(x)\n        : warnTypeError(x);\n\nconst Inquiry = (x: InquiryValue): InquiryMonad => ({\n    // Inquire: core method\n    // You may pass a Function, a QuestionMonad (with a function), or a string which will look up\n    //  in the current Inquiry's questionset.\n    inquire: (f: Function | string | QuestionMonad): InquiryMonad => {\n        const extractName = (f: string | QuestionMonad) =>\n            (f as QuestionMonad)[$$questionSymbol]\n                ? (f as QuestionMonad).name()\n                : f;\n        const fnName =\n            typeof f === 'function' ? f.name || 'anon' : extractName(f);\n        const fExtractFn = (f as any)[$$questionSymbol]\n            ? (f as QuestionMonad).extract()\n            : f;\n        const fIsFn = typeof fExtractFn === 'function';\n        const inquire = fIsFn\n            ? fExtractFn\n            : (x.questionset as QuestionsetMonad).find(fExtractFn);\n\n        const warnNotPassFail = (resp: any): InquiryMonad => {\n            console.warn(\n                'inquire was passed a function that does not return Pass or Fail:',\n                fnName\n            );\n            console.warn('response was:', resp);\n            return Inquiry(x);\n        };\n        const inquireResponse =\n            typeof inquire === 'function' ? inquire(x.subject.join()) : {};\n\n        return inquireResponse[$$failSymbol] ||\n            inquireResponse[$$passSymbol] ||\n            inquireResponse[$$inquirySymbol]\n            ? inquireResponse.answer(x, fnName, Inquiry)\n            : warnNotPassFail([inquireResponse, fnName]);\n    },\n\n    inquireMap: (\n        f: Function | string | QuestionMonad,\n        i: Array<any>\n    ): InquiryMonad =>\n        i.reduce(\n            (inq, ii) => {\n                const extractName = (f: string | QuestionMonad) =>\n                    (f as QuestionMonad)[$$questionSymbol]\n                        ? (f as QuestionMonad).name()\n                        : f;\n                const fnName =\n                    typeof f === 'function' ? f.name || 'anon' : extractName(f);\n                const fExtractFn = (f as any)[$$questionSymbol]\n                    ? (f as QuestionMonad).extract()\n                    : f;\n                const fIsFn = typeof fExtractFn === 'function';\n                const inquire = fIsFn\n                    ? fExtractFn\n                    : (x.questionset as QuestionsetMonad).find(fExtractFn);\n\n                const warnNotPassFail = (resp: any): InquiryMonad => {\n                    console.warn(\n                        'inquire was passed a function that does not return Pass or Fail:',\n                        fnName\n                    );\n                    console.warn('response was:', resp);\n                    return inq;\n                };\n                const inquireResponse =\n                    typeof inquire === 'function'\n                        ? inquire(ii)(inq.join().subject.join())\n                        : {};\n\n                // each return aggregates new contained value through exit\n                return inquireResponse[$$failSymbol] ||\n                    inquireResponse[$$passSymbol] ||\n                    inquireResponse[$$inquirySymbol]\n                    ? inquireResponse.answer(inq.join(), fnName, Inquiry)\n                    : warnNotPassFail([inquireResponse, fnName]);\n            },\n\n            // initial Inquiry will be what is in `x` now\n            Inquiry({\n                subject: x.subject,\n                iou: x.iou,\n                fail: x.fail,\n                pass: x.pass,\n                informant: x.informant,\n                questionset: x.questionset,\n                receipt: x.receipt\n            })\n        ),\n\n    inquireAll: (): InquiryMonad =>\n        (x.questionset as QuestionsetMonad).chain(\n            (questions: Array<QuestionValue>): InquiryMonad =>\n                questions.reduce(\n                    (inq: InquiryMonad, q: QuestionValue): InquiryMonad =>\n                        inq.inquire(QuestionOf(q)),\n                    Inquiry(x)\n                )\n        ),\n\n    using: (a: QuestionsetMonad): InquiryMonad =>\n        Inquiry({\n            subject: x.subject,\n            iou: x.iou,\n            fail: x.fail,\n            pass: x.pass,\n            informant: x.informant,\n            questionset: a,\n            receipt: x.receipt\n        }),\n\n    // Informant: for spying/logging/observable\n    informant: (f: Function): InquiryMonad =>\n        Inquiry({\n            subject: x.subject,\n            iou: x.iou,\n            fail: x.fail,\n            pass: x.pass,\n            informant: f,\n            questionset: x.questionset,\n            receipt: x.receipt\n        }),\n\n    inspect: (): string =>\n        `Inquiry(${x.fail.inspect()} ${x.pass.inspect()} ${x.iou.inspect()}`,\n\n    // Flow control: swap pass/fail\n    swap: (): InquiryMonad =>\n        Inquiry({\n            subject: x.subject,\n            iou: x.iou,\n            fail: Fail(x.pass.join()),\n            pass: Pass(x.fail.join()),\n            informant: x.informant,\n            questionset: x.questionset,\n            receipt: x.receipt\n        }),\n\n    // Mapping across both branches\n    unison: (\n        f: Function\n    ): InquiryMonad => // apply a single map to both fail & pass (e.g. sort)\n        Inquiry({\n            subject: x.subject,\n            iou: x.iou,\n            fail: Fail(f(x.fail.join())),\n            pass: Pass(f(x.pass.join())),\n            informant: x.informant,\n            questionset: x.questionset,\n            receipt: x.receipt\n        }),\n\n    // standard Monad methods\n    map: (f: Function): InquiryMonad => InquirySubject(f(x)),\n    ap: (y: Monad): Monad => y.map(x),\n    chain: (f: Function): any => f(x),\n    join: (): InquiryValue => x,\n\n    // execute the provided function if there are failures, else continue\n    breakpoint: (f: Function): InquiryMonad =>\n        x.fail.join().length ? Inquiry(f(x)) : Inquiry(x),\n\n    // execute the provided function if there are passes, else continue\n    milestone: (f: Function): InquiryMonad =>\n        x.pass.join().length ? Inquiry(f(x)) : Inquiry(x),\n\n    // internal method: execute informant, return new InquiryP() based on updated results\n    answer: (i: InquiryValue, n: string, _: Function): InquiryMonad => {\n        i.informant([n, Inquiry(x)]);\n        return Inquiry({\n            subject: i.subject,\n            iou: i.iou,\n            fail: i.fail.concat(x.fail),\n            pass: i.pass.concat(x.pass),\n            informant: i.informant,\n            questionset: i.questionset,\n            receipt: i.receipt\n        });\n    },\n\n    // Unwrap methods\n\n    // unwraps, mapping for both branches, full value returned\n    conclude: (f: Function, g: Function): InquiryValue => ({\n        subject: x.subject,\n        iou: x.iou,\n        fail: f(x.fail),\n        pass: g(x.pass),\n        informant: x.informant,\n        questionset: x.questionset,\n        receipt: x.receipt\n    }),\n\n    // If there are no fails, handoff aggregated passes to supplied function; if any fails, return noop\n    cleared: (f: Function): any | void =>\n        x.fail.isEmpty() ? f(x.pass) : noop(),\n\n    // If there are fails, handoff aggregated fails to supplied function; if no fails, return noop\n    faulted: (f: Function): void | any =>\n        x.fail.isEmpty() ? noop() : f(x.fail),\n\n    // If there are passes, handoff aggregated passes to supplied function; if no passes, return noop\n    suffice: (f: Function): void | any =>\n        x.pass.isEmpty() ? noop() : f(x.pass),\n\n    // If there are no passes, handoff aggregated fails to supplied function; if any passes, return noop\n    scratch: (f: Function): any | void =>\n        x.pass.isEmpty() ? f(x.fail) : noop(),\n\n    // unwrap left if any fails, right if not\n    fork: (f: Function, g: Function): any =>\n        x.fail.join().length ? f(x.fail) : g(x.pass),\n\n    // unwrap left if any passes, right if not\n    fold: (f: Function, g: Function): any =>\n        x.pass.join().length ? f(x.pass) : g(x.fail),\n\n    // return a merged pass/fail\n    zip: (f: Function): Array<any> => f(x.fail.join().concat(x.pass.join())), // return a concat of pass/fails\n\n    [$$inquirySymbol]: true\n});\n\nconst exportInquiry = {\n    subject: InquirySubject,\n    of: InquiryOf\n};\n\nconst InquiryPSubject = (x: any | InquiryMonad): InquiryMonad =>\n    (x as any)[$$inquirySymbol]\n        ? x\n        : InquiryP({\n              subject: Maybe.of(x),\n              fail: Fail([]),\n              pass: Pass([]),\n              iou: IOU([]),\n              informant: <T>(_: T) => _,\n              questionset: Questionset([['', noop]]),\n              receipt: Receipt([])\n          });\n\nconst warnTypeErrorP = <T>(x: T): InquiryMonad => {\n    console.warn(\n        'InquiryP.of requires properties: subject, fail, pass, iou, informant, questionset, receipt. Converting to InquiryP.subject().'\n    );\n    return InquiryPSubject(x);\n};\n\nconst InquiryPOf = (x: InquiryValue): InquiryMonad =>\n    'subject' in x &&\n    'fail' in x &&\n    'pass' in x &&\n    'iou' in x &&\n    'informant' in x &&\n    'questionset' in x &&\n    'receipt' in x\n        ? InquiryP(x)\n        : warnTypeErrorP(x);\n\nconst buildInq = <T>(x: T) => (vals: Array<any>): InquiryMonad =>\n    vals.reduce((acc, cur) => cur[1].answer(acc, cur[0], InquiryP).join(), x);\n\n// this is a bit complex, so here it goes:\n// Take all our IOUs (Questions), extract and resolve their Promises\n// then take those results apply to a tuple with the question name/description\nconst resolveQs = (x: InquiryValue) =>\n    x.iou.join().map(\n        (q: QuestionMonad): Promise<PassFailMonad> =>\n            q\n                .extract()()\n                .then(\n                    (result: PassFailMonad): Promise<Array<any>> =>\n                        Promise.resolve([q.name(), result])\n                )\n    );\n\nconst InquiryP = (x: InquiryValue): InquiryMonad => ({\n    inquire: (f: Function | string | QuestionMonad) => {\n        const extractName = (f: string | QuestionMonad) =>\n            (f as QuestionMonad)[$$questionSymbol]\n                ? (f as QuestionMonad).name()\n                : f;\n        const fnName =\n            typeof f === 'function' ? f.name || 'anon' : extractName(f);\n        const fExtractFn = (f as any)[$$questionSymbol]\n            ? (f as QuestionMonad).extract()\n            : f;\n        const fIsFn = typeof fExtractFn === 'function';\n        const inquire = fIsFn\n            ? fExtractFn\n            : (x.questionset as QuestionsetMonad).find(fExtractFn);\n\n        const warnNotPassFail = (resp: any): InquiryMonad => {\n            console.warn(\n                'inquire was passed a function that does not return Pass or Fail:',\n                fnName\n            );\n            console.warn('response was:', resp);\n            return Inquiry(x);\n        };\n\n        const inquireResponse =\n            typeof inquire === 'function' ? inquire(x.subject.join()) : {};\n\n        const syncronousResult = (response: any): InquiryMonad =>\n            response[$$failSymbol] ||\n            response[$$passSymbol] ||\n            response[$$inquirySymbol]\n                ? response.answer(x, fnName, InquiryP)\n                : warnNotPassFail([inquireResponse, fnName]);\n\n        const inquireIOU = inquireResponse.then\n            ? QuestionOf([fnName as string, () => inquireResponse])\n            : false;\n\n        return inquireIOU\n            ? InquiryP({\n                  subject: x.subject,\n                  fail: x.fail,\n                  pass: x.pass,\n                  iou: x.iou.concat(IOU([inquireIOU])),\n                  informant: x.informant,\n                  questionset: x.questionset,\n                  receipt: x.receipt\n              })\n            : syncronousResult(inquireResponse);\n    },\n\n    inquireMap: (\n        f: Function | string | QuestionMonad,\n        i: Array<any>\n    ): InquiryMonad =>\n        i.reduce(\n            (inq, ii) => {\n                const extractName = (f: string | QuestionMonad) =>\n                    (f as QuestionMonad)[$$questionSymbol]\n                        ? (f as QuestionMonad).name()\n                        : f;\n                const fnName =\n                    typeof f === 'function' ? f.name || 'anon' : extractName(f);\n                const fExtractFn = (f as any)[$$questionSymbol]\n                    ? (f as QuestionMonad).extract()\n                    : f;\n                const fIsFn = typeof fExtractFn === 'function';\n                const inquire = fIsFn\n                    ? fExtractFn\n                    : (x.questionset as QuestionsetMonad).find(fExtractFn);\n\n                const warnNotPassFail = (resp: any) => {\n                    console.warn(\n                        'inquire was passed a function that does not return Pass or Fail:',\n                        fnName\n                    );\n                    console.warn('response was:', resp);\n                    return inq;\n                };\n                const inquireResponse =\n                    typeof inquire === 'function'\n                        ? inquire(ii)(inq.join().subject.join())\n                        : {};\n\n                const syncronousResult = (response: any): InquiryMonad =>\n                    response[$$failSymbol] ||\n                    response[$$passSymbol] ||\n                    response[$$inquirySymbol]\n                        ? response.answer(inq.join(), fnName, InquiryP)\n                        : Pass(response).answer(x, fnName, InquiryP); // @todo this should be warNotPassFail\n\n                return inquireResponse.then\n                    ? InquiryP({\n                          subject: inq.join().subject,\n                          fail: inq.join().fail,\n                          pass: inq.join().pass,\n                          iou: inq.join().iou.concat(IOU([inquireResponse])),\n                          informant: inq.join().informant,\n                          questionset: inq.join().questionset,\n                          receipt: inq.join().receipt\n                      })\n                    : syncronousResult(inquireResponse);\n            },\n\n            // initial Inquiry will be what is in `x` now\n            InquiryP({\n                subject: x.subject,\n                iou: x.iou,\n                fail: x.fail,\n                pass: x.pass,\n                informant: x.informant,\n                questionset: x.questionset,\n                receipt: x.receipt\n            })\n        ),\n\n    inquireAll: (): InquiryMonad =>\n        (x.questionset as QuestionsetMonad).chain(\n            (questions: Array<QuestionValue>): InquiryMonad =>\n                questions.reduce(\n                    (inq: InquiryMonad, q: QuestionValue): InquiryMonad =>\n                        inq.inquire(QuestionOf(q)),\n                    InquiryP(x)\n                )\n        ),\n\n    using: (a: QuestionsetMonad): InquiryMonad =>\n        InquiryP({\n            subject: x.subject,\n            iou: x.iou,\n            fail: x.fail,\n            pass: x.pass,\n            informant: x.informant,\n            questionset: a,\n            receipt: x.receipt\n        }),\n\n    // Informant: for spying/logging/observable\n    informant: (f: Function): InquiryMonad =>\n        InquiryP({\n            subject: x.subject,\n            iou: x.iou,\n            fail: x.fail,\n            pass: x.pass,\n            informant: f,\n            questionset: x.questionset,\n            receipt: x.receipt\n        }),\n\n    inspect: (): string =>\n        `InquiryP(${x.fail.inspect()} ${x.pass.inspect()} ${x.iou.inspect()}`,\n\n    // Flow control: swap left/right pass/fail (iou is untouched)\n    swap: (): InquiryMonad =>\n        InquiryP({\n            subject: x.subject,\n            iou: x.iou,\n            fail: Fail(x.pass.join()),\n            pass: Pass(x.fail.join()),\n            informant: x.informant,\n            questionset: x.questionset,\n            receipt: x.receipt\n        }),\n\n    // Mapping across both branches\n    unison: (\n        f: Function\n    ): InquiryMonad => // apply a single map to both fail & pass (e.g. sort), iou untouched\n        InquiryP({\n            subject: x.subject,\n            iou: x.iou,\n            fail: Fail(f(x.fail.join())),\n            pass: Pass(f(x.pass.join())),\n            informant: x.informant,\n            questionset: x.questionset,\n            receipt: x.receipt\n        }),\n\n    // Standard monad methods - note that while these work, remember that `x` is a typed Object\n    map: (f: Function): InquiryMonad => InquiryPSubject(f(x)), // cast required for now\n    ap: (y: Monad): Monad => y.map(x),\n    chain: (f: Function): any => f(x),\n    join: (): InquiryValue => x,\n\n    // execute the provided function if there are failures, else continue\n    breakpoint: (f: Function): InquiryMonad =>\n        x.fail.join().length ? InquiryP(f(x)) : InquiryP(x),\n\n    // execute the provided function if there are passes, else continue\n    milestone: (f: Function): InquiryMonad =>\n        x.pass.join().length ? InquiryP(f(x)) : InquiryP(x),\n\n    // internal method: execute informant, return new InquiryP() based on updated results\n    answer: (i: InquiryValue, n: string, _: Function): InquiryMonad => {\n        i.informant([n, InquiryP(x)]);\n        return InquiryP({\n            subject: i.subject,\n            iou: i.iou,\n            fail: i.fail.concat(x.fail),\n            pass: i.pass.concat(x.pass),\n            informant: i.informant,\n            questionset: i.questionset,\n            receipt: i.receipt\n        });\n    },\n\n    // Unwrapping methods: all return Promises, all complete outstanding IOUs\n\n    // @todo handle Promise.reject? Is it a failure or what?\n    // Unwraps the Inquiry after ensuring all IOUs are completed\n    conclude: async (f: Function, g: Function): Promise<InquiryValue> =>\n        Promise.all(resolveQs(x))\n            .then(buildInq(x))\n            .then(i => (i[$$inquirySymbol] ? i.join() : i))\n            .then(y => ({\n                subject: y.subject,\n                iou: y.iou,\n                fail: f(y.fail),\n                pass: g(y.pass),\n                informant: y.informant,\n                questionset: y.questionset,\n                receipt: y.receipt\n            })),\n\n    // If no fails, handoff aggregated passes to supplied function; if fails, return noop\n    cleared: async (f: Function): Promise<InquiryMonad | Array<any>> =>\n        Promise.all(resolveQs(x))\n            .then(buildInq(x))\n            .then(i => (i[$$inquirySymbol] ? i.join() : i))\n            .then(y => (y.fail.isEmpty() ? f(y.pass) : noop()))\n            .catch(err => console.error('err', err)),\n\n    // If fails, handoff aggregated fails to supplied function; if no fails, return noop\n    faulted: async (f: Function): Promise<InquiryMonad | Array<any>> =>\n        Promise.all(resolveQs(x))\n            .then(buildInq(x))\n            .then(i => (i[$$inquirySymbol] ? i.join() : i))\n            .then(y => (y.fail.isEmpty() ? noop() : f(y.fail))),\n\n    // If any passes, handoff aggregated passes to supplied function; if no passes, return noop\n    suffice: async (f: Function): Promise<InquiryMonad | Array<any>> =>\n        Promise.all(resolveQs(x))\n            .then(buildInq(x))\n            .then(i => (i[$$inquirySymbol] ? i.join() : i))\n            .then(y => (y.pass.isEmpty() ? noop() : f(y.pass)))\n            .catch(err => console.error('err', err)),\n\n    // If no passes, handoff aggregated fails to supplied function; if any passes, return noop\n    scratch: async (f: Function): Promise<InquiryMonad | Array<any>> =>\n        Promise.all(resolveQs(x))\n            .then(buildInq(x))\n            .then(i => (i[$$inquirySymbol] ? i.join() : i))\n            .then(y => (y.pass.isEmpty() ? f(y.fail) : noop())),\n\n    // Take left function and hands off fails if any, otherwise takes right function and hands off passes to that function\n    fork: async (f: Function, g: Function): Promise<Array<any>> =>\n        Promise.all(resolveQs(x))\n            .then(buildInq(x))\n            .then(i => (i[$$inquirySymbol] ? i.join() : i))\n            .then(y => (y.fail.join().length ? f(y.fail) : g(y.pass))),\n\n    // Take left function and hands off fails if any, otherwise takes right function and hands off passes to that function\n    fold: async (f: Function, g: Function): Promise<Array<any>> =>\n        Promise.all(resolveQs(x))\n            .then(buildInq(x))\n            .then(i => (i[$$inquirySymbol] ? i.join() : i))\n            .then(y => (y.pass.join().length ? f(y.pass) : g(y.fail))),\n\n    // return a Promise containing a merged fail/pass resultset array\n    zip: async (f: Function): Promise<Array<any>> =>\n        Promise.all(resolveQs(x))\n            .then(buildInq(x))\n            .then(i => (i[$$inquirySymbol] ? i.join() : i))\n            .then(y => f(y.fail.join().concat(y.pass.join()))),\n\n    // await all IOUs to resolve, then return a new Inquiry CONVERTS TO PROMISE!\n    await: async (t: number = Infinity): Promise<InquiryMonad> => {\n        // try: generator function. Each IOU = array in for loop as per https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield\n        const timeLimit = new Promise((resolve, reject) =>\n            setTimeout(resolve, t, [\n                'timeout',\n                Fail('Promise(s) have timed out')\n            ])\n        );\n        const awaitPromises = Promise.all(resolveQs(x));\n\n        return (\n            Promise.race([timeLimit, awaitPromises])\n                // @ts-ignore\n                .then(buildInq(x))\n                .then((i: any) => (i[$$inquirySymbol] ? i.join() : i))\n                .then((y: any) => InquiryPOf(y))\n        );\n    },\n    [$$inquirySymbol]: true\n});\n\nconst exportInquiryP = {\n    subject: InquiryPSubject,\n    of: InquiryPOf\n};\n\nexport {\n    exportInquiry as Inquiry,\n    exportInquiryP as InquiryP,\n    exportQuestionset as Questionset,\n    exportQuestion as Question,\n    Receipt,\n    Fail,\n    Pass,\n    IOU,\n    $$inquirySymbol\n};\n"],"sourceRoot":""}